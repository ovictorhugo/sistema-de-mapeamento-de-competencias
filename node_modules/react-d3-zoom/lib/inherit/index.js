'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d3 = require('d3');

var _d32 = _interopRequireDefault(_d3);

var _reactD3Core = require('react-d3-core');

"use sctrict";

var Zoom = (function (_Component) {
  _inherits(Zoom, _Component);

  function Zoom(props) {
    _classCallCheck(this, Zoom);

    _get(Object.getPrototypeOf(Zoom.prototype), 'constructor', this).call(this, props);
  }

  _createClass(Zoom, [{
    key: 'mkXDomain',
    value: function mkXDomain() {
      return this.setXDomain = (0, _reactD3Core.xDomainCount)(this.props);
    }
  }, {
    key: 'mkYDomain',
    value: function mkYDomain(stack) {
      return this.setYDomain = (0, _reactD3Core.yDomainCount)(this.props, stack);
    }
  }, {
    key: 'mkXScale',
    value: function mkXScale(xDomain) {
      var _props = this.props;
      var data = _props.data;
      var xScale = _props.xScale;
      var _state = this.state;
      var xRange = _state.xRange;
      var xRangeRoundBands = _state.xRangeRoundBands;

      var newXScale = {
        scale: xScale,
        range: xRange,
        domain: xDomain,
        rangeRoundBands: xRangeRoundBands
      };

      var newScale = (0, _reactD3Core.scale)(newXScale);

      return this.setXScale = newScale;
    }
  }, {
    key: 'mkYScale',
    value: function mkYScale(yDomain) {
      var _props2 = this.props;
      var data = _props2.data;
      var yScale = _props2.yScale;
      var _state2 = this.state;
      var yRange = _state2.yRange;
      var yRangeRoundBands = _state2.yRangeRoundBands;

      var newYScale = {
        scale: yScale,
        range: yRange,
        domain: yDomain,
        rangeRoundBands: yRangeRoundBands
      };

      var newScale = (0, _reactD3Core.scale)(newYScale);

      return this.setYScale = newScale;
    }
  }, {
    key: 'zoomed',
    value: function zoomed(xScale, yScale, zoom) {
      var _state3 = this.state;
      var zoomType = _state3.zoomType;
      var xScaleSet = _state3.xScaleSet;
      var yScaleSet = _state3.yScaleSet;
      var yDomainSet = _state3.yDomainSet;
      var xDomainSet = _state3.xDomainSet;
      var _props3 = this.props;
      var zoomX = _props3.zoomX;
      var zoomY = _props3.zoomY;

      var evt = _d32['default'].event;
      var zoomXDomain = xScale.domain();
      var zoomYDomain = yScale.domain();

      if (xScale.domain()[0] < this.setXDomain[0]) {
        zoomXDomain = xDomainSet;
        zoom.translate([zoom.translate()[0] - xScale(this.setXDomain[0]) + xScale.range()[0], zoom.translate()[1]]);
      } else if (xScale.domain()[1] > this.setXDomain[1]) {
        zoomXDomain = xDomainSet;
        zoom.translate([zoom.translate()[0] - xScale(this.setXDomain[1]) + xScale.range()[1], zoom.translate()[1]]);
      }

      if (yScale.domain()[0] < this.setYDomain[0]) {
        zoomYDomain = yDomainSet;
        zoom.translate([zoom.translate()[0], zoom.translate()[1] - yScale(this.setYDomain[0]) + yScale.range()[0]]);
      } else if (yScale.domain()[1] > this.setYDomain[1]) {
        zoomYDomain = yDomainSet;
        zoom.translate([zoom.translate()[0], zoom.translate()[1] - yScale(this.setYDomain[1]) + yScale.range()[1]]);
      }

      if (zoomType === 'line' || zoomType === 'scatter' || zoomType === 'area_stack') {

        this.setState({
          d3EventSet: evt,
          xDomainSet: zoomX ? zoomXDomain : this.setXDomain,
          yDomainSet: zoomY ? zoomYDomain : this.setYDomain
        });
      } else if (zoomType === 'bar' || zoomType === 'bar_group' || zoomType === 'bar_stack') {

        var newDomain = xScale.domain();
        var selected = xScaleSet.domain().filter(function (d) {
          var filterDomain = newDomain[0] <= xScaleSet(d) && xScaleSet(d) <= newDomain[1];
          return filterDomain;
        });

        if (selected.length === 0) selected = xDomainSet;

        this.setState({
          d3EventSet: evt,
          xDomainSet: zoomX ? selected : this.setXDomain,
          yDomainSet: zoomY ? zoomYDomain : this.setYDomain
        });
      }
    }
  }], [{
    key: 'propTypes',
    value: {
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired,
      width: _react.PropTypes.number,
      height: _react.PropTypes.number,
      x: _react.PropTypes.func,
      xDomain: _react.PropTypes.array,
      xRange: _react.PropTypes.array,
      xScale: _react.PropTypes.string,
      xRangeRoundBands: _react.PropTypes.object,
      y: _react.PropTypes.func,
      yDomain: _react.PropTypes.array,
      yRange: _react.PropTypes.array,
      yScale: _react.PropTypes.string,
      zoomX: _react.PropTypes.bool,
      zoomY: _react.PropTypes.bool
    },
    enumerable: true
  }]);

  return Zoom;
})(_react.Component);

exports['default'] = Zoom;
module.exports = exports['default'];