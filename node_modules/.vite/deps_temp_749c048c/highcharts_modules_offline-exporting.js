import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/highcharts/modules/offline-exporting.js
var require_offline_exporting = __commonJS({
  "node_modules/highcharts/modules/offline-exporting.js"(exports, module) {
    (function(a) {
      "object" === typeof module && module.exports ? (a["default"] = a, module.exports = a) : "function" === typeof define && define.amd ? define("highcharts/modules/offline-exporting", ["highcharts", "highcharts/modules/exporting"], function(b) {
        a(b);
        a.Highcharts = b;
        return a;
      }) : a("undefined" !== typeof Highcharts ? Highcharts : void 0);
    })(function(a) {
      function b(a2, u, d, b2) {
        a2.hasOwnProperty(u) || (a2[u] = b2.apply(null, d), "function" === typeof CustomEvent && window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", { detail: {
          path: u,
          module: a2[u]
        } })));
      }
      a = a ? a._modules : {};
      b(a, "Extensions/DownloadURL.js", [a["Core/Globals.js"]], function(a2) {
        const { isSafari: u } = a2, d = a2.win, b2 = d.document, h = d.URL || d.webkitURL || d, r = a2.dataURLtoBlob = function(a3) {
          if ((a3 = a3.replace(/filename=.*;/, "").match(/data:([^;]*)(;base64)?,([0-9A-Za-z+/]+)/)) && 3 < a3.length && d.atob && d.ArrayBuffer && d.Uint8Array && d.Blob && h.createObjectURL) {
            const b3 = d.atob(a3[3]);
            var p = new d.ArrayBuffer(b3.length);
            p = new d.Uint8Array(p);
            for (let a4 = 0; a4 < p.length; ++a4)
              p[a4] = b3.charCodeAt(a4);
            a3 = new d.Blob(
              [p],
              { type: a3[1] }
            );
            return h.createObjectURL(a3);
          }
        };
        a2 = a2.downloadURL = function(a3, h2) {
          var n = d.navigator;
          const q = b2.createElement("a");
          if ("string" === typeof a3 || a3 instanceof String || !n.msSaveOrOpenBlob) {
            a3 = `${a3}`;
            n = /Edge\/\d+/.test(n.userAgent);
            if (u && "string" === typeof a3 && 0 === a3.indexOf("data:application/pdf") || n || 2e6 < a3.length) {
              if (a3 = r(a3) || "", !a3)
                throw Error("Failed to convert to blob");
            }
            if ("undefined" !== typeof q.download)
              q.href = a3, q.download = h2, b2.body.appendChild(q), q.click(), b2.body.removeChild(q);
            else
              try {
                const b3 = d.open(
                  a3,
                  "chart"
                );
                if ("undefined" === typeof b3 || null === b3)
                  throw Error("Failed to open window");
              } catch (S) {
                d.location.href = a3;
              }
          } else
            n.msSaveOrOpenBlob(a3, h2);
        };
        return { dataURLtoBlob: r, downloadURL: a2 };
      });
      b(a, "Extensions/OfflineExporting/OfflineExportingDefaults.js", [], function() {
        return { libURL: "https://code.highcharts.com/11.1.0/lib/", menuItemDefinitions: {
          downloadPNG: { textKey: "downloadPNG", onclick: function() {
            this.exportChartLocal();
          } },
          downloadJPEG: { textKey: "downloadJPEG", onclick: function() {
            this.exportChartLocal({ type: "image/jpeg" });
          } },
          downloadSVG: { textKey: "downloadSVG", onclick: function() {
            this.exportChartLocal({ type: "image/svg+xml" });
          } },
          downloadPDF: { textKey: "downloadPDF", onclick: function() {
            this.exportChartLocal({ type: "application/pdf" });
          } }
        } };
      });
      b(a, "Extensions/OfflineExporting/OfflineExporting.js", [
        a["Core/Renderer/HTML/AST.js"],
        a["Core/Chart/Chart.js"],
        a["Core/Defaults.js"],
        a["Extensions/DownloadURL.js"],
        a["Extensions/Exporting/Exporting.js"],
        a["Core/Globals.js"],
        a["Core/HttpUtilities.js"],
        a["Extensions/OfflineExporting/OfflineExportingDefaults.js"],
        a["Core/Utilities.js"]
      ], function(a2, b2, d, I, B, r, p, J, n) {
        const { defaultOptions: u } = d, { downloadURL: h } = I, { win: g, doc: z } = r, { ajax: K } = p, { addEvent: L, error: A, extend: M, fireEvent: N, merge: F } = n;
        a2.allowedAttributes.push("data-z-index", "fill-opacity", "rx", "ry", "stroke-dasharray", "stroke-linejoin", "text-anchor", "transform", "version", "viewBox", "visibility", "xmlns", "xmlns:xlink");
        a2.allowedTags.push("desc", "clippath", "g");
        const O = [];
        var y;
        (function(b3) {
          function d2(a3, f) {
            const c = this, e = F(c.options.exporting, a3), x = function(a4) {
              false === e.fallbackToExportServer ? e.error ? e.error(e, a4) : A(28, true) : c.exportChart(e);
            };
            a3 = function() {
              return [].some.call(c.container.getElementsByTagName("image"), function(a4) {
                a4 = a4.getAttribute("href");
                return "" !== a4 && "string" === typeof a4 && 0 !== a4.indexOf("data:");
              });
            };
            r.isMS && c.styledMode && !B.inlineAllowlist.length && B.inlineAllowlist.push(
              /^blockSize/,
              /^border/,
              /^caretColor/,
              /^color/,
              /^columnRule/,
              /^columnRuleColor/,
              /^cssFloat/,
              /^cursor/,
              /^fill$/,
              /^fillOpacity/,
              /^font/,
              /^inlineSize/,
              /^length/,
              /^lineHeight/,
              /^opacity/,
              /^outline/,
              /^parentRule/,
              /^rx$/,
              /^ry$/,
              /^stroke/,
              /^textAlign/,
              /^textAnchor/,
              /^textDecoration/,
              /^transform/,
              /^vectorEffect/,
              /^visibility/,
              /^x$/,
              /^y$/
            );
            r.isMS && ("application/pdf" === e.type || c.container.getElementsByTagName("image").length && "image/svg+xml" !== e.type) || "application/pdf" === e.type && a3() ? x(Error("Image type not supported for this chart/browser.")) : c.getSVGForLocalExport(e, f || {}, x, function(a4) {
              -1 < a4.indexOf("<foreignObject") && "image/svg+xml" !== e.type && (r.isMS || "application/pdf" === e.type) ? x(Error("Image type not supported for charts with embedded HTML")) : b3.downloadSVGLocal(a4, M({ filename: c.getFilename() }, e), x, () => N(c, "exportChartLocalSuccess"));
            });
          }
          function p2(a3, f) {
            const c = z.getElementsByTagName("head")[0], e = z.createElement("script");
            e.type = "text/javascript";
            e.src = a3;
            e.onload = f;
            e.onerror = function() {
              A("Error loading script " + a3);
            };
            c.appendChild(e);
          }
          function q(a3, f, d3, e) {
            const c = this, g2 = (a4, f2, b4) => {
              ++h2;
              b4.imageElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", a4);
              m && h2 === v && e(c.sanitizeSVG(k.innerHTML, l));
            };
            let t, k, l, G = null, m, v = 0, h2 = 0;
            c.unbindGetSVG = L(
              c,
              "getSVG",
              (a4) => {
                l = a4.chartCopy.options;
                m = (k = a4.chartCopy.container.cloneNode(true)) && k.getElementsByTagName("image") || [];
                v = m.length;
              }
            );
            c.getSVGForExport(a3, f);
            try {
              if (!m || !m.length) {
                e(c.sanitizeSVG(k.innerHTML, l));
                return;
              }
              for (f = 0; f < m.length; f++)
                t = m[f], (G = t.getAttributeNS("http://www.w3.org/1999/xlink", "href")) ? b3.imageToDataUrl(G, "image/png", { imageElement: t }, a3.scale, g2, d3, d3, d3) : (h2++, t.parentNode.removeChild(t), f--, m && h2 === v && e(c.sanitizeSVG(k.innerHTML, l)));
            } catch (w) {
              d3(w);
            }
            c.unbindGetSVG();
          }
          function y2(a3, f, d3, e, h2, u2, t, p3, l) {
            let c = new g.Image(), m;
            const k = () => {
              setTimeout(function() {
                const b4 = z.createElement("canvas"), g2 = b4.getContext && b4.getContext("2d");
                let k2;
                try {
                  if (g2) {
                    b4.height = c.height * e;
                    b4.width = c.width * e;
                    g2.drawImage(c, 0, 0, b4.width, b4.height);
                    try {
                      k2 = b4.toDataURL(f), h2(k2, f, d3, e);
                    } catch (D) {
                      m(a3, f, d3, e);
                    }
                  } else
                    t(a3, f, d3, e);
                } finally {
                  l && l(a3, f, d3, e);
                }
              }, b3.loadEventDeferDelay);
            }, x = () => {
              p3(a3, f, d3, e);
              l && l(a3, f, d3, e);
            };
            m = () => {
              c = new g.Image();
              m = u2;
              c.crossOrigin = "Anonymous";
              c.onload = k;
              c.onerror = x;
              c.src = a3;
            };
            c.onload = k;
            c.onerror = x;
            c.src = a3;
          }
          function E(a3) {
            var c = g.navigator.userAgent;
            c = -1 < c.indexOf("WebKit") && 0 > c.indexOf("Chrome");
            try {
              if (!c && -1 === a3.indexOf("<foreignObject"))
                return b3.domurl.createObjectURL(new g.Blob([a3], { type: "image/svg+xml;charset-utf-16" }));
            } catch (k) {
            }
            return "data:image/svg+xml;charset=UTF-8," + encodeURIComponent(a3);
          }
          function H(a3, b4, d3) {
            const c = Number(a3.getAttribute("width")) + 2 * b4;
            b4 = Number(a3.getAttribute("height")) + 2 * b4;
            const f = new g.jspdf.jsPDF(b4 > c ? "p" : "l", "pt", [c, b4]);
            [].forEach.call(a3.querySelectorAll('*[visibility="hidden"]'), function(a4) {
              a4.parentNode.removeChild(a4);
            });
            const h2 = a3.querySelectorAll("linearGradient");
            for (let a4 = 0; a4 < h2.length; a4++) {
              const b5 = h2[a4].querySelectorAll("stop");
              let c2 = 0;
              for (; c2 < b5.length && "0" === b5[c2].getAttribute("offset") && "0" === b5[c2 + 1].getAttribute("offset"); )
                b5[c2].remove(), c2++;
            }
            [].forEach.call(a3.querySelectorAll("tspan"), (a4) => {
              "​" === a4.textContent && (a4.textContent = " ", a4.setAttribute("dx", -5));
            });
            f.svg(a3, { x: 0, y: 0, width: c, height: b4, removeInvalid: true }).then(() => d3(f.output("datauristring")));
          }
          b3.CanVGRenderer = {};
          b3.domurl = g.URL || g.webkitURL || g;
          b3.loadEventDeferDelay = r.isMS ? 150 : 0;
          b3.compose = function(a3) {
            if (n.pushUnique(O, a3)) {
              const b4 = a3.prototype;
              b4.getSVGForLocalExport = q;
              b4.exportChartLocal = d2;
              F(true, u.exporting, J);
            }
            return a3;
          };
          b3.downloadSVGLocal = function(c, d3, k, e) {
            const f = z.createElement("div"), n2 = d3.type || "image/png", t = (d3.filename || "chart") + "." + ("image/svg+xml" === n2 ? "svg" : n2.split("/")[1]), q2 = d3.scale || 1;
            let l, r2, m, v = d3.libURL || u.exporting.libURL, C = true, w = d3.pdfFont;
            v = "/" !== v.slice(-1) ? v + "/" : v;
            const B2 = (a3, b4) => {
              const c2 = (a4, b5) => {
                g.jspdf.jsPDF.API.events.push(["initialized", function() {
                  this.addFileToVFS(
                    a4,
                    b5
                  );
                  this.addFont(a4, "HighchartsFont", a4);
                  this.getFontList().HighchartsFont || this.setFont("HighchartsFont");
                }]);
              };
              w && !/[^\u0000-\u007F\u200B]+/.test(a3.textContent || "") && (w = void 0);
              const d4 = ["normal", "italic", "bold", "bolditalic"];
              let e2;
              const f2 = () => {
                const a4 = d4.shift();
                if (!a4)
                  return b4();
                const h2 = w && w[a4];
                h2 ? K({
                  url: h2,
                  responseType: "blob",
                  success: (b5, d5) => {
                    b5 = new FileReader();
                    b5.onloadend = function() {
                      if ("string" === typeof this.result) {
                        const b6 = this.result.split(",")[1];
                        c2(a4, b6);
                        "normal" === a4 && (e2 = b6);
                      }
                      f2();
                    };
                    b5.readAsDataURL(d5.response);
                  },
                  error: f2
                }) : (e2 && c2(a4, e2), f2());
              };
              f2();
            }, A2 = () => {
              a2.setElementHTML(f, c);
              const b4 = f.getElementsByTagName("text");
              let d4;
              [].forEach.call(b4, function(a3) {
                ["fontFamily", "fontSize"].forEach((b5) => {
                  for (var c2 = a3; c2 && c2 !== f; ) {
                    if (c2.style[b5]) {
                      c2 = c2.style[b5];
                      "fontSize" === b5 && /em$/.test(c2) && (c2 = Math.round(16 * parseFloat(c2)) + "px");
                      a3.style[b5] = c2;
                      break;
                    }
                    c2 = c2.parentNode;
                  }
                });
                a3.style.fontFamily = w && w.normal ? "HighchartsFont" : String(a3.style.fontFamily && a3.style.fontFamily.split(" ").splice(-1));
                d4 = a3.getElementsByTagName("title");
                [].forEach.call(d4, function(b5) {
                  a3.removeChild(b5);
                });
              });
              const g2 = f.querySelector("svg");
              g2 && B2(g2, () => {
                H(g2, 0, (a3) => {
                  try {
                    h(a3, t), e && e();
                  } catch (Q) {
                    k(Q);
                  }
                });
              });
            };
            if ("image/svg+xml" === n2)
              try {
                "undefined" !== typeof g.MSBlobBuilder ? (r2 = new g.MSBlobBuilder(), r2.append(c), l = r2.getBlob("image/svg+xml")) : l = E(c), h(l, t), e && e();
              } catch (D) {
                k(D);
              }
            else
              "application/pdf" === n2 ? g.jspdf && g.jspdf.jsPDF ? A2() : (C = true, p2(v + "jspdf.js", function() {
                p2(v + "svg2pdf.js", A2);
              })) : (l = E(c), m = function() {
                try {
                  b3.domurl.revokeObjectURL(l);
                } catch (D) {
                }
              }, y2(l, n2, {}, q2, function(a3) {
                try {
                  h(a3, t), e && e();
                } catch (P) {
                  k(P);
                }
              }, function() {
                const a3 = z.createElement("canvas"), b4 = a3.getContext("2d"), d4 = c.match(/^<svg[^>]*width\s*=\s*"?(\d+)"?[^>]*>/)[1] * q2, f2 = c.match(/^<svg[^>]*height\s*=\s*"?(\d+)"?[^>]*>/)[1] * q2, l2 = function() {
                  g.canvg.Canvg.fromString(b4, c).start();
                  try {
                    h(g.navigator.msSaveOrOpenBlob ? a3.msToBlob() : a3.toDataURL(n2), t), e && e();
                  } catch (R) {
                    k(R);
                  } finally {
                    m();
                  }
                };
                a3.width = d4;
                a3.height = f2;
                g.canvg ? l2() : (C = true, p2(v + "canvg.js", function() {
                  l2();
                }));
              }, k, k, function() {
                C && m();
              }));
          };
          b3.getScript = p2;
          b3.imageToDataUrl = y2;
          b3.svgToDataUrl = E;
          b3.svgToPdf = H;
        })(y || (y = {}));
        return y;
      });
      b(
        a,
        "masters/modules/offline-exporting.src.js",
        [a["Core/Globals.js"], a["Extensions/OfflineExporting/OfflineExporting.js"]],
        function(a2, b2) {
          a2.downloadSVGLocal = b2.downloadSVGLocal;
          b2.compose(a2.Chart);
        }
      );
    });
  }
});
export default require_offline_exporting();
//# sourceMappingURL=highcharts_modules_offline-exporting.js.map
