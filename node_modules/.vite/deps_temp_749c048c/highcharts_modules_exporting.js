import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/highcharts/modules/exporting.js
var require_exporting = __commonJS({
  "node_modules/highcharts/modules/exporting.js"(exports, module) {
    (function(a) {
      "object" === typeof module && module.exports ? (a["default"] = a, module.exports = a) : "function" === typeof define && define.amd ? define("highcharts/modules/exporting", ["highcharts"], function(e) {
        a(e);
        a.Highcharts = e;
        return a;
      }) : a("undefined" !== typeof Highcharts ? Highcharts : void 0);
    })(function(a) {
      function e(a2, l, y, F) {
        a2.hasOwnProperty(l) || (a2[l] = F.apply(null, y), "function" === typeof CustomEvent && window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", { detail: { path: l, module: a2[l] } })));
      }
      a = a ? a._modules : {};
      e(a, "Core/Chart/ChartNavigationComposition.js", [], function() {
        var a2;
        (function(a3) {
          a3.compose = function(a4) {
            a4.navigation || (a4.navigation = new b(a4));
            return a4;
          };
          class b {
            constructor(a4) {
              this.updates = [];
              this.chart = a4;
            }
            addUpdate(a4) {
              this.chart.navigation.updates.push(a4);
            }
            update(a4, b2) {
              this.updates.forEach((A) => {
                A.call(this.chart, a4, b2);
              });
            }
          }
          a3.Additions = b;
        })(a2 || (a2 = {}));
        return a2;
      });
      e(a, "Extensions/Exporting/ExportingDefaults.js", [a["Core/Globals.js"]], function(a2) {
        ({ isTouchDevice: a2 } = a2);
        return { exporting: {
          allowTableSorting: true,
          type: "image/png",
          url: "https://export.highcharts.com/",
          pdfFont: { normal: void 0, bold: void 0, bolditalic: void 0, italic: void 0 },
          printMaxWidth: 780,
          scale: 2,
          buttons: { contextButton: { className: "highcharts-contextbutton", menuClassName: "highcharts-contextmenu", symbol: "menu", titleKey: "contextButtonTitle", menuItems: "viewFullscreen printChart separator downloadPNG downloadJPEG downloadPDF downloadSVG".split(" ") } },
          menuItemDefinitions: {
            viewFullscreen: { textKey: "viewFullscreen", onclick: function() {
              this.fullscreen && this.fullscreen.toggle();
            } },
            printChart: { textKey: "printChart", onclick: function() {
              this.print();
            } },
            separator: { separator: true },
            downloadPNG: { textKey: "downloadPNG", onclick: function() {
              this.exportChart();
            } },
            downloadJPEG: { textKey: "downloadJPEG", onclick: function() {
              this.exportChart({ type: "image/jpeg" });
            } },
            downloadPDF: { textKey: "downloadPDF", onclick: function() {
              this.exportChart({ type: "application/pdf" });
            } },
            downloadSVG: { textKey: "downloadSVG", onclick: function() {
              this.exportChart({ type: "image/svg+xml" });
            } }
          }
        }, lang: {
          viewFullscreen: "View in full screen",
          exitFullscreen: "Exit from full screen",
          printChart: "Print chart",
          downloadPNG: "Download PNG image",
          downloadJPEG: "Download JPEG image",
          downloadPDF: "Download PDF document",
          downloadSVG: "Download SVG vector image",
          contextButtonTitle: "Chart context menu"
        }, navigation: { buttonOptions: { symbolSize: 14, symbolX: 14.5, symbolY: 13.5, align: "right", buttonSpacing: 3, height: 28, verticalAlign: "top", width: 28, symbolFill: "#666666", symbolStroke: "#666666", symbolStrokeWidth: 3, theme: { padding: 5 } }, menuStyle: {
          border: "none",
          borderRadius: "3px",
          background: "#ffffff",
          padding: "0.5em"
        }, menuItemStyle: { background: "none", borderRadius: "3px", color: "#333333", padding: "0.5em", fontSize: a2 ? "0.9em" : "0.8em", transition: "background 250ms, color 250ms" }, menuItemHoverStyle: { background: "#f2f2f2" } } };
      });
      e(a, "Extensions/Exporting/ExportingSymbols.js", [], function() {
        var a2;
        (function(a3) {
          function b(a4, b2, g, c) {
            return [["M", a4, b2 + 2.5], ["L", a4 + g, b2 + 2.5], ["M", a4, b2 + c / 2 + 0.5], ["L", a4 + g, b2 + c / 2 + 0.5], ["M", a4, b2 + c - 1.5], ["L", a4 + g, b2 + c - 1.5]];
          }
          function l(a4, b2, g, c) {
            a4 = c / 3 - 2;
            c = [];
            return c = c.concat(this.circle(g - a4, b2, a4, a4), this.circle(g - a4, b2 + a4 + 4, a4, a4), this.circle(g - a4, b2 + 2 * (a4 + 4), a4, a4));
          }
          const p = [];
          a3.compose = function(a4) {
            -1 === p.indexOf(a4) && (p.push(a4), a4 = a4.prototype.symbols, a4.menu = b, a4.menuball = l.bind(a4));
          };
        })(a2 || (a2 = {}));
        return a2;
      });
      e(a, "Extensions/Exporting/Fullscreen.js", [a["Core/Renderer/HTML/AST.js"], a["Core/Utilities.js"]], function(a2, l) {
        function b() {
          this.fullscreen = new B(this);
        }
        const { addEvent: e2, fireEvent: p } = l, A = [];
        class B {
          static compose(a3) {
            l.pushUnique(A, a3) && e2(a3, "beforeRender", b);
          }
          constructor(a3) {
            this.chart = a3;
            this.isOpen = false;
            a3 = a3.renderTo;
            this.browserProps || ("function" === typeof a3.requestFullscreen ? this.browserProps = { fullscreenChange: "fullscreenchange", requestFullscreen: "requestFullscreen", exitFullscreen: "exitFullscreen" } : a3.mozRequestFullScreen ? this.browserProps = { fullscreenChange: "mozfullscreenchange", requestFullscreen: "mozRequestFullScreen", exitFullscreen: "mozCancelFullScreen" } : a3.webkitRequestFullScreen ? this.browserProps = { fullscreenChange: "webkitfullscreenchange", requestFullscreen: "webkitRequestFullScreen", exitFullscreen: "webkitExitFullscreen" } : a3.msRequestFullscreen && (this.browserProps = { fullscreenChange: "MSFullscreenChange", requestFullscreen: "msRequestFullscreen", exitFullscreen: "msExitFullscreen" }));
          }
          close() {
            const a3 = this, c = a3.chart, b2 = c.options.chart;
            p(c, "fullscreenClose", null, function() {
              if (a3.isOpen && a3.browserProps && c.container.ownerDocument instanceof Document)
                c.container.ownerDocument[a3.browserProps.exitFullscreen]();
              a3.unbindFullscreenEvent && (a3.unbindFullscreenEvent = a3.unbindFullscreenEvent());
              c.setSize(a3.origWidth, a3.origHeight, false);
              a3.origWidth = void 0;
              a3.origHeight = void 0;
              b2.width = a3.origWidthOption;
              b2.height = a3.origHeightOption;
              a3.origWidthOption = void 0;
              a3.origHeightOption = void 0;
              a3.isOpen = false;
              a3.setButtonText();
            });
          }
          open() {
            const a3 = this, c = a3.chart, b2 = c.options.chart;
            p(c, "fullscreenOpen", null, function() {
              b2 && (a3.origWidthOption = b2.width, a3.origHeightOption = b2.height);
              a3.origWidth = c.chartWidth;
              a3.origHeight = c.chartHeight;
              if (a3.browserProps) {
                const b3 = e2(c.container.ownerDocument, a3.browserProps.fullscreenChange, function() {
                  a3.isOpen ? (a3.isOpen = false, a3.close()) : (c.setSize(
                    null,
                    null,
                    false
                  ), a3.isOpen = true, a3.setButtonText());
                }), g = e2(c, "destroy", b3);
                a3.unbindFullscreenEvent = () => {
                  b3();
                  g();
                };
                const m = c.renderTo[a3.browserProps.requestFullscreen]();
                if (m)
                  m["catch"](function() {
                    alert("Full screen is not supported inside a frame.");
                  });
              }
            });
          }
          setButtonText() {
            var b2 = this.chart, c = b2.exportDivElements;
            const m = b2.options.exporting, M = m && m.buttons && m.buttons.contextButton.menuItems;
            b2 = b2.options.lang;
            m && m.menuItemDefinitions && b2 && b2.exitFullscreen && b2.viewFullscreen && M && c && (c = c[M.indexOf("viewFullscreen")]) && a2.setElementHTML(
              c,
              this.isOpen ? b2.exitFullscreen : m.menuItemDefinitions.viewFullscreen.text || b2.viewFullscreen
            );
          }
          toggle() {
            this.isOpen ? this.close() : this.open();
          }
        }
        "";
        "";
        return B;
      });
      e(a, "Core/HttpUtilities.js", [a["Core/Globals.js"], a["Core/Utilities.js"]], function(a2, e2) {
        const { doc: b } = a2, { createElement: l, discardElement: p, merge: A, objectEach: B } = e2, g = { ajax: function(a3) {
          const b2 = { json: "application/json", xml: "application/xml", text: "text/plain", octet: "application/octet-stream" }, c = new XMLHttpRequest();
          if (!a3.url)
            return false;
          c.open(
            (a3.type || "get").toUpperCase(),
            a3.url,
            true
          );
          a3.headers && a3.headers["Content-Type"] || c.setRequestHeader("Content-Type", b2[a3.dataType || "json"] || b2.text);
          B(a3.headers, function(a4, b3) {
            c.setRequestHeader(b3, a4);
          });
          a3.responseType && (c.responseType = a3.responseType);
          c.onreadystatechange = function() {
            let b3;
            if (4 === c.readyState) {
              if (200 === c.status) {
                if ("blob" !== a3.responseType && (b3 = c.responseText, "json" === a3.dataType))
                  try {
                    b3 = JSON.parse(b3);
                  } catch (z) {
                    if (z instanceof Error) {
                      a3.error && a3.error(c, z);
                      return;
                    }
                  }
                return a3.success && a3.success(b3, c);
              }
              a3.error && a3.error(c, c.responseText);
            }
          };
          a3.data && "string" !== typeof a3.data && (a3.data = JSON.stringify(a3.data));
          c.send(a3.data);
        }, getJSON: function(a3, b2) {
          g.ajax({ url: a3, success: b2, dataType: "json", headers: { "Content-Type": "text/plain" } });
        }, post: function(a3, g2, e3) {
          const c = l("form", A({ method: "post", action: a3, enctype: "multipart/form-data" }, e3), { display: "none" }, b.body);
          B(g2, function(a4, b2) {
            l("input", { type: "hidden", name: b2, value: a4 }, void 0, c);
          });
          c.submit();
          p(c);
        } };
        "";
        return g;
      });
      e(a, "Extensions/Exporting/Exporting.js", [
        a["Core/Renderer/HTML/AST.js"],
        a["Core/Chart/Chart.js"],
        a["Core/Chart/ChartNavigationComposition.js"],
        a["Core/Defaults.js"],
        a["Extensions/Exporting/ExportingDefaults.js"],
        a["Extensions/Exporting/ExportingSymbols.js"],
        a["Extensions/Exporting/Fullscreen.js"],
        a["Core/Globals.js"],
        a["Core/HttpUtilities.js"],
        a["Core/Utilities.js"]
      ], function(a2, e2, y, F, p, A, B, g, c, m) {
        const { defaultOptions: b, setOptions: l } = F, { doc: z, SVG_NS: R, win: D } = g, { addEvent: C, css: w, createElement: G, discardElement: N, extend: H, find: S, fireEvent: I, isObject: T, merge: k, objectEach: U, pick: q, removeEvent: V, uniqueKey: W } = m;
        var J;
        (function(e3) {
          function F2(a3) {
            const f = this, d = f.renderer, b2 = k(f.options.navigation.buttonOptions, a3), c2 = b2.onclick, E = b2.menuItems, n = b2.symbolSize || 12;
            let x;
            f.btnCount || (f.btnCount = 0);
            f.exportDivElements || (f.exportDivElements = [], f.exportSVGElements = []);
            if (false !== b2.enabled && b2.theme) {
              var v = b2.theme, e4;
              f.styledMode || (v.fill = q(v.fill, "#ffffff"), v.stroke = q(v.stroke, "none"));
              c2 ? e4 = function(a4) {
                a4 && a4.stopPropagation();
                c2.call(f, a4);
              } : E && (e4 = function(a4) {
                a4 && a4.stopPropagation();
                f.contextMenu(
                  r.menuClassName,
                  E,
                  r.translateX,
                  r.translateY,
                  r.width,
                  r.height,
                  r
                );
                r.setState(2);
              });
              b2.text && b2.symbol ? v.paddingLeft = q(v.paddingLeft, 30) : b2.text || H(v, { width: b2.width, height: b2.height, padding: 0 });
              f.styledMode || (v["stroke-linecap"] = "round", v.fill = q(v.fill, "#ffffff"), v.stroke = q(v.stroke, "none"));
              var r = d.button(b2.text, 0, 0, e4, v, void 0, void 0, void 0, void 0, b2.useHTML).addClass(a3.className).attr({ title: q(f.options.lang[b2._titleKey || b2.titleKey], "") });
              r.menuClassName = a3.menuClassName || "highcharts-menu-" + f.btnCount++;
              b2.symbol && (x = d.symbol(
                b2.symbol,
                b2.symbolX - n / 2,
                b2.symbolY - n / 2,
                n,
                n,
                { width: n, height: n }
              ).addClass("highcharts-button-symbol").attr({ zIndex: 1 }).add(r), f.styledMode || x.attr({ stroke: b2.symbolStroke, fill: b2.symbolFill, "stroke-width": b2.symbolStrokeWidth || 1 }));
              r.add(f.exportingGroup).align(H(b2, { width: r.width, x: q(b2.x, f.buttonOffset) }), true, "spacingBox");
              f.buttonOffset += (r.width + b2.buttonSpacing) * ("right" === b2.align ? -1 : 1);
              f.exportSVGElements.push(r, x);
            }
          }
          function J2() {
            if (this.printReverseInfo) {
              var { childNodes: a3, origDisplay: f, resetParams: b2 } = this.printReverseInfo;
              this.moveContainers(this.renderTo);
              [].forEach.call(a3, function(a4, b3) {
                1 === a4.nodeType && (a4.style.display = f[b3] || "");
              });
              this.isPrinting = false;
              b2 && this.setSize.apply(this, b2);
              delete this.printReverseInfo;
              L = void 0;
              I(this, "afterPrint");
            }
          }
          function M() {
            const a3 = z.body, b2 = this.options.exporting.printMaxWidth, c2 = { childNodes: a3.childNodes, origDisplay: [], resetParams: void 0 };
            this.isPrinting = true;
            this.pointer.reset(null, 0);
            I(this, "beforePrint");
            b2 && this.chartWidth > b2 && (c2.resetParams = [this.options.chart.width, void 0, false], this.setSize(
              b2,
              void 0,
              false
            ));
            [].forEach.call(c2.childNodes, function(a4, b3) {
              1 === a4.nodeType && (c2.origDisplay[b3] = a4.style.display, a4.style.display = "none");
            });
            this.moveContainers(a3);
            this.printReverseInfo = c2;
          }
          function X(a3) {
            a3.renderExporting();
            C(a3, "redraw", a3.renderExporting);
            C(a3, "destroy", a3.destroyExport);
          }
          function Y(b2, f, c2, e4, g2, E, n) {
            const d = this, t = d.options.navigation, O = d.chartWidth, r = d.chartHeight, l2 = "cache-" + b2, K = Math.max(g2, E);
            let u, h = d[l2];
            h || (d.exportContextMenu = d[l2] = h = G("div", { className: b2 }, { position: "absolute", zIndex: 1e3, padding: K + "px", pointerEvents: "auto" }, d.fixedDiv || d.container), u = G("ul", { className: "highcharts-menu" }, d.styledMode ? {} : { listStyle: "none", margin: 0, padding: 0 }, h), d.styledMode || w(u, H({ MozBoxShadow: "3px 3px 10px #888", WebkitBoxShadow: "3px 3px 10px #888", boxShadow: "3px 3px 10px #888" }, t.menuStyle)), h.hideMenu = function() {
              w(h, { display: "none" });
              n && n.setState(0);
              d.openMenu = false;
              w(d.renderTo, { overflow: "hidden" });
              w(d.container, { overflow: "hidden" });
              m.clearTimeout(h.hideTimer);
              I(d, "exportMenuHidden");
            }, d.exportEvents.push(C(
              h,
              "mouseleave",
              function() {
                h.hideTimer = D.setTimeout(h.hideMenu, 500);
              }
            ), C(h, "mouseenter", function() {
              m.clearTimeout(h.hideTimer);
            }), C(z, "mouseup", function(a3) {
              d.pointer.inClass(a3.target, b2) || h.hideMenu();
            }), C(h, "click", function() {
              d.openMenu && h.hideMenu();
            })), f.forEach(function(b3) {
              "string" === typeof b3 && (b3 = d.options.exporting.menuItemDefinitions[b3]);
              if (T(b3, true)) {
                let f2;
                b3.separator ? f2 = G("hr", void 0, void 0, u) : ("viewData" === b3.textKey && d.isDataTableVisible && (b3.textKey = "hideData"), f2 = G("li", {
                  className: "highcharts-menu-item",
                  onclick: function(a3) {
                    a3 && a3.stopPropagation();
                    h.hideMenu();
                    b3.onclick && b3.onclick.apply(d, arguments);
                  }
                }, void 0, u), a2.setElementHTML(f2, b3.text || d.options.lang[b3.textKey]), d.styledMode || (f2.onmouseover = function() {
                  w(this, t.menuItemHoverStyle);
                }, f2.onmouseout = function() {
                  w(this, t.menuItemStyle);
                }, w(f2, H({ cursor: "pointer" }, t.menuItemStyle || {}))));
                d.exportDivElements.push(f2);
              }
            }), d.exportDivElements.push(u, h), d.exportMenuWidth = h.offsetWidth, d.exportMenuHeight = h.offsetHeight);
            f = { display: "block" };
            c2 + d.exportMenuWidth > O ? f.right = O - c2 - g2 - K + "px" : f.left = c2 - K + "px";
            e4 + E + d.exportMenuHeight > r && "top" !== n.alignOptions.verticalAlign ? f.bottom = r - e4 - K + "px" : f.top = e4 + E - K + "px";
            w(h, f);
            w(d.renderTo, { overflow: "" });
            w(d.container, { overflow: "" });
            d.openMenu = true;
            I(d, "exportMenuShown");
          }
          function Z(a3) {
            const b2 = a3 ? a3.target : this, d = b2.exportSVGElements, c2 = b2.exportDivElements;
            a3 = b2.exportEvents;
            let e4;
            d && (d.forEach((a4, f) => {
              a4 && (a4.onclick = a4.ontouchstart = null, e4 = "cache-" + a4.menuClassName, b2[e4] && delete b2[e4], d[f] = a4.destroy());
            }), d.length = 0);
            b2.exportingGroup && (b2.exportingGroup.destroy(), delete b2.exportingGroup);
            c2 && (c2.forEach(function(a4, b3) {
              a4 && (m.clearTimeout(a4.hideTimer), V(a4, "mouseleave"), c2[b3] = a4.onmouseout = a4.onmouseover = a4.ontouchstart = a4.onclick = null, N(a4));
            }), c2.length = 0);
            a3 && (a3.forEach(function(a4) {
              a4();
            }), a3.length = 0);
          }
          function aa(a3, b2) {
            b2 = this.getSVGForExport(a3, b2);
            a3 = k(this.options.exporting, a3);
            c.post(a3.url, { filename: a3.filename ? a3.filename.replace(/\//g, "-") : this.getFilename(), type: a3.type, width: a3.width, scale: a3.scale, svg: b2 }, a3.formAttributes);
          }
          function ba() {
            this.styledMode && this.inlineStyles();
            return this.container.innerHTML;
          }
          function ca() {
            const a3 = this.userOptions.title && this.userOptions.title.text;
            let b2 = this.options.exporting.filename;
            if (b2)
              return b2.replace(/\//g, "-");
            "string" === typeof a3 && (b2 = a3.toLowerCase().replace(/<\/?[^>]+(>|$)/g, "").replace(/[\s_]+/g, "-").replace(/[^a-z0-9\-]/g, "").replace(/^[\-]+/g, "").replace(/[\-]+/g, "-").substr(0, 24).replace(/[\-]+$/g, ""));
            if (!b2 || 5 > b2.length)
              b2 = "chart";
            return b2;
          }
          function da(a3) {
            let b2, d = k(this.options, a3);
            d.plotOptions = k(this.userOptions.plotOptions, a3 && a3.plotOptions);
            d.time = k(this.userOptions.time, a3 && a3.time);
            const c2 = G("div", null, { position: "absolute", top: "-9999em", width: this.chartWidth + "px", height: this.chartHeight + "px" }, z.body);
            var e4 = this.renderTo.style.width;
            var g2 = this.renderTo.style.height;
            e4 = d.exporting.sourceWidth || d.chart.width || /px$/.test(e4) && parseInt(e4, 10) || (d.isGantt ? 800 : 600);
            g2 = d.exporting.sourceHeight || d.chart.height || /px$/.test(g2) && parseInt(g2, 10) || 400;
            H(d.chart, { animation: false, renderTo: c2, forExport: true, renderer: "SVGRenderer", width: e4, height: g2 });
            d.exporting.enabled = false;
            delete d.data;
            d.series = [];
            this.series.forEach(function(a4) {
              b2 = k(a4.userOptions, { animation: false, enableMouseTracking: false, showCheckbox: false, visible: a4.visible });
              b2.isInternal || d.series.push(b2);
            });
            const n = {};
            this.axes.forEach(function(a4) {
              a4.userOptions.internalKey || (a4.userOptions.internalKey = W());
              a4.options.isInternal || (n[a4.coll] || (n[a4.coll] = true, d[a4.coll] = []), d[a4.coll].push(k(a4.userOptions, { visible: a4.visible })));
            });
            const x = new this.constructor(d, this.callback);
            a3 && ["xAxis", "yAxis", "series"].forEach(function(b3) {
              const d2 = {};
              a3[b3] && (d2[b3] = a3[b3], x.update(d2));
            });
            this.axes.forEach(function(a4) {
              const b3 = S(x.axes, function(b4) {
                return b4.options.internalKey === a4.userOptions.internalKey;
              });
              var d2 = a4.getExtremes();
              const f = d2.userMin;
              d2 = d2.userMax;
              b3 && ("undefined" !== typeof f && f !== b3.min || "undefined" !== typeof d2 && d2 !== b3.max) && b3.setExtremes(f, d2, true, false);
            });
            g2 = x.getChartHTML();
            I(this, "getSVG", { chartCopy: x });
            g2 = this.sanitizeSVG(g2, d);
            d = null;
            x.destroy();
            N(c2);
            return g2;
          }
          function ea(a3, b2) {
            const d = this.options.exporting;
            return this.getSVG(k(
              { chart: { borderRadius: 0 } },
              d.chartOptions,
              b2,
              { exporting: { sourceWidth: a3 && a3.sourceWidth || d.sourceWidth, sourceHeight: a3 && a3.sourceHeight || d.sourceHeight } }
            ));
          }
          function fa(a3) {
            return a3.replace(/([A-Z])/g, function(a4, b2) {
              return "-" + b2.toLowerCase();
            });
          }
          function ha() {
            function a3(d) {
              const f = {};
              let e4, k3;
              if (n && 1 === d.nodeType && -1 === ia.indexOf(d.nodeName)) {
                e4 = D.getComputedStyle(d, null);
                k3 = "svg" === d.nodeName ? {} : D.getComputedStyle(d.parentNode, null);
                if (!l2[d.nodeName]) {
                  m2 = n.getElementsByTagName("svg")[0];
                  var t = n.createElementNS(d.namespaceURI, d.nodeName);
                  m2.appendChild(t);
                  var p2 = D.getComputedStyle(t, null);
                  var u = {};
                  for (var h in p2)
                    "string" !== typeof p2[h] || /^[0-9]+$/.test(h) || (u[h] = p2[h]);
                  l2[d.nodeName] = u;
                  "text" === d.nodeName && delete l2.text.fill;
                  m2.removeChild(t);
                }
                for (const a4 in e4)
                  if (g.isFirefox || g.isMS || g.isSafari || Object.hasOwnProperty.call(e4, a4)) {
                    h = e4[a4];
                    var q2 = a4;
                    t = p2 = false;
                    if (c2.length) {
                      for (u = c2.length; u-- && !p2; )
                        p2 = c2[u].test(q2);
                      t = !p2;
                    }
                    "transform" === q2 && "none" === h && (t = true);
                    for (u = b2.length; u-- && !t; )
                      t = b2[u].test(q2) || "function" === typeof h;
                    t || k3[q2] === h && "svg" !== d.nodeName || l2[d.nodeName][q2] === h || (P && -1 === P.indexOf(q2) ? f[q2] = h : h && d.setAttribute(fa(q2), h));
                  }
                w(d, f);
                "svg" === d.nodeName && d.setAttribute("stroke-width", "1px");
                "text" !== d.nodeName && [].forEach.call(d.children || d.childNodes, a3);
              }
            }
            const b2 = ja, c2 = e3.inlineAllowlist, l2 = {};
            let m2;
            const k2 = z.createElement("iframe");
            w(k2, { width: "1px", height: "1px", visibility: "hidden" });
            z.body.appendChild(k2);
            const n = k2.contentWindow && k2.contentWindow.document;
            n && n.body.appendChild(n.createElementNS(R, "svg"));
            a3(this.container.querySelector("svg"));
            m2.parentNode.removeChild(m2);
            k2.parentNode.removeChild(k2);
          }
          function ka(a3) {
            (this.fixedDiv ? [this.fixedDiv, this.scrollingContainer] : [this.container]).forEach(function(b2) {
              a3.appendChild(b2);
            });
          }
          function la() {
            const a3 = this;
            a3.exporting = { update: function(b2, d) {
              a3.isDirtyExporting = true;
              k(true, a3.options.exporting, b2);
              q(d, true) && a3.redraw();
            } };
            y.compose(a3).navigation.addUpdate((b2, d) => {
              a3.isDirtyExporting = true;
              k(true, a3.options.navigation, b2);
              q(d, true) && a3.redraw();
            });
          }
          function ma() {
            const a3 = this;
            a3.isPrinting || (L = a3, g.isSafari || a3.beforePrint(), setTimeout(() => {
              D.focus();
              D.print();
              g.isSafari || setTimeout(() => {
                a3.afterPrint();
              }, 1e3);
            }, 1));
          }
          function na() {
            const a3 = this, b2 = a3.options.exporting, c2 = b2.buttons, e4 = a3.isDirtyExporting || !a3.exportSVGElements;
            a3.buttonOffset = 0;
            a3.isDirtyExporting && a3.destroyExport();
            e4 && false !== b2.enabled && (a3.exportEvents = [], a3.exportingGroup = a3.exportingGroup || a3.renderer.g("exporting-group").attr({ zIndex: 3 }).add(), U(c2, function(b3) {
              a3.addButton(b3);
            }), a3.isDirtyExporting = false);
          }
          function oa(a3, b2) {
            const d = a3.indexOf("</svg>") + 6;
            let c2 = a3.substr(d);
            a3 = a3.substr(0, d);
            b2 && b2.exporting && b2.exporting.allowHTML && c2 && (c2 = '<foreignObject x="0" y="0" width="' + b2.chart.width + '" height="' + b2.chart.height + '"><body xmlns="http://www.w3.org/1999/xhtml">' + c2.replace(/(<(?:img|br).*?(?=>))>/g, "$1 />") + "</body></foreignObject>", a3 = a3.replace("</svg>", c2 + "</svg>"));
            return a3 = a3.replace(/zIndex="[^"]+"/g, "").replace(/symbolName="[^"]+"/g, "").replace(/jQuery[0-9]+="[^"]+"/g, "").replace(/url\(("|&quot;)(.*?)("|&quot;);?\)/g, "url($2)").replace(/url\([^#]+#/g, "url(#").replace(/<svg /, '<svg xmlns:xlink="http://www.w3.org/1999/xlink" ').replace(
              / (|NS[0-9]+:)href=/g,
              " xlink:href="
            ).replace(/\n/, " ").replace(/(fill|stroke)="rgba\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\.]+)\)"/g, '$1="rgb($2)" $1-opacity="$3"').replace(/&nbsp;/g, " ").replace(/&shy;/g, "­");
          }
          const Q = [], ja = [/-/, /^(clipPath|cssText|d|height|width)$/, /^font$/, /[lL]ogical(Width|Height)$/, /^parentRule$/, /perspective/, /TapHighlightColor/, /^transition/, /^length$/, /^[0-9]+$/], P = "fill stroke strokeLinecap strokeLinejoin strokeWidth textAnchor x y".split(" ");
          e3.inlineAllowlist = [];
          const ia = [
            "clipPath",
            "defs",
            "desc"
          ];
          let L;
          e3.compose = function(a3, c2) {
            A.compose(c2);
            B.compose(a3);
            m.pushUnique(Q, a3) && (c2 = a3.prototype, c2.afterPrint = J2, c2.exportChart = aa, c2.inlineStyles = ha, c2.print = ma, c2.sanitizeSVG = oa, c2.getChartHTML = ba, c2.getSVG = da, c2.getSVGForExport = ea, c2.getFilename = ca, c2.moveContainers = ka, c2.beforePrint = M, c2.contextMenu = Y, c2.addButton = F2, c2.destroyExport = Z, c2.renderExporting = na, c2.callbacks.push(X), C(a3, "init", la), g.isSafari && g.win.matchMedia("print").addListener(function(a4) {
              L && (a4.matches ? L.beforePrint() : L.afterPrint());
            }));
            m.pushUnique(
              Q,
              l
            ) && (b.exporting = k(p.exporting, b.exporting), b.lang = k(p.lang, b.lang), b.navigation = k(p.navigation, b.navigation));
          };
        })(J || (J = {}));
        "";
        "";
        return J;
      });
      e(a, "masters/modules/exporting.src.js", [a["Core/Globals.js"], a["Extensions/Exporting/Exporting.js"], a["Core/HttpUtilities.js"]], function(a2, e2, y) {
        a2.HttpUtilities = y;
        a2.ajax = y.ajax;
        a2.getJSON = y.getJSON;
        a2.post = y.post;
        e2.compose(a2.Chart, a2.Renderer);
      });
    });
  }
});
export default require_exporting();
//# sourceMappingURL=highcharts_modules_exporting.js.map
