{
  "version": 3,
  "sources": ["../../highcharts/modules/offline-exporting.src.js"],
  "sourcesContent": ["/**\n * @license Highcharts JS v11.1.0 (2023-06-05)\n *\n * Client side exporting module\n *\n * (c) 2015-2021 Torstein Honsi / Oystein Moseng\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/offline-exporting', ['highcharts', 'highcharts/modules/exporting'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DownloadURL.js', [_modules['Core/Globals.js']], function (Highcharts) {\n        /* *\n         *\n         *  (c) 2015-2021 Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Mixin for downloading content in the browser\n         *\n         * */\n        const { isSafari } = Highcharts;\n        const win = Highcharts.win, doc = win.document, domurl = win.URL || win.webkitURL || win;\n        /**\n         * Convert base64 dataURL to Blob if supported, otherwise returns undefined.\n         * @private\n         * @function Highcharts.dataURLtoBlob\n         * @param {string} dataURL\n         *        URL to convert\n         * @return {string|undefined}\n         *         Blob\n         */\n        const dataURLtoBlob = Highcharts.dataURLtoBlob = function (dataURL) {\n            const parts = dataURL\n                .replace(/filename=.*;/, '')\n                .match(/data:([^;]*)(;base64)?,([0-9A-Za-z+/]+)/);\n            if (parts &&\n                parts.length > 3 &&\n                (win.atob) &&\n                win.ArrayBuffer &&\n                win.Uint8Array &&\n                win.Blob &&\n                (domurl.createObjectURL)) {\n                // Try to convert data URL to Blob\n                const binStr = win.atob(parts[3]), buf = new win.ArrayBuffer(binStr.length), binary = new win.Uint8Array(buf);\n                for (let i = 0; i < binary.length; ++i) {\n                    binary[i] = binStr.charCodeAt(i);\n                }\n                const blob = new win.Blob([binary], { 'type': parts[1] });\n                return domurl.createObjectURL(blob);\n            }\n        };\n        /**\n         * Download a data URL in the browser. Can also take a blob as first param.\n         *\n         * @private\n         * @function Highcharts.downloadURL\n         * @param {string|global.URL} dataURL\n         *        The dataURL/Blob to download\n         * @param {string} filename\n         *        The name of the resulting file (w/extension)\n         * @return {void}\n         */\n        const downloadURL = Highcharts.downloadURL = function (dataURL, filename) {\n            const nav = win.navigator, a = doc.createElement('a');\n            // IE specific blob implementation\n            // Don't use for normal dataURLs\n            if (typeof dataURL !== 'string' &&\n                !(dataURL instanceof String) &&\n                nav.msSaveOrOpenBlob) {\n                nav.msSaveOrOpenBlob(dataURL, filename);\n                return;\n            }\n            dataURL = `${dataURL}`;\n            // Some browsers have limitations for data URL lengths. Try to convert to\n            // Blob or fall back. Edge always needs that blob.\n            const isOldEdgeBrowser = /Edge\\/\\d+/.test(nav.userAgent);\n            // Safari on iOS needs Blob in order to download PDF\n            const safariBlob = (isSafari &&\n                typeof dataURL === 'string' &&\n                dataURL.indexOf('data:application/pdf') === 0);\n            if (safariBlob || isOldEdgeBrowser || dataURL.length > 2000000) {\n                dataURL = dataURLtoBlob(dataURL) || '';\n                if (!dataURL) {\n                    throw new Error('Failed to convert to blob');\n                }\n            }\n            // Try HTML5 download attr if supported\n            if (typeof a.download !== 'undefined') {\n                a.href = dataURL;\n                a.download = filename; // HTML5 download attribute\n                doc.body.appendChild(a);\n                a.click();\n                doc.body.removeChild(a);\n            }\n            else {\n                // No download attr, just opening data URI\n                try {\n                    const windowRef = win.open(dataURL, 'chart');\n                    if (typeof windowRef === 'undefined' || windowRef === null) {\n                        throw new Error('Failed to open window');\n                    }\n                }\n                catch (e) {\n                    // window.open failed, trying location.href\n                    win.location.href = dataURL;\n                }\n            }\n        };\n        const DownloadURL = {\n            dataURLtoBlob,\n            downloadURL\n        };\n\n        return DownloadURL;\n    });\n    _registerModule(_modules, 'Extensions/OfflineExporting/OfflineExportingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         * Declarations\n         *\n         * */\n        const OfflineExportingDefaults = {\n            libURL: 'https://code.highcharts.com/11.1.0/lib/',\n            // When offline-exporting is loaded, redefine the menu item definitions\n            // related to download.\n            menuItemDefinitions: {\n                downloadPNG: {\n                    textKey: 'downloadPNG',\n                    onclick: function () {\n                        this.exportChartLocal();\n                    }\n                },\n                downloadJPEG: {\n                    textKey: 'downloadJPEG',\n                    onclick: function () {\n                        this.exportChartLocal({\n                            type: 'image/jpeg'\n                        });\n                    }\n                },\n                downloadSVG: {\n                    textKey: 'downloadSVG',\n                    onclick: function () {\n                        this.exportChartLocal({\n                            type: 'image/svg+xml'\n                        });\n                    }\n                },\n                downloadPDF: {\n                    textKey: 'downloadPDF',\n                    onclick: function () {\n                        this.exportChartLocal({\n                            type: 'application/pdf'\n                        });\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OfflineExportingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/OfflineExporting/OfflineExporting.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Defaults.js'], _modules['Extensions/DownloadURL.js'], _modules['Extensions/Exporting/Exporting.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Extensions/OfflineExporting/OfflineExportingDefaults.js'], _modules['Core/Utilities.js']], function (AST, Chart, D, DownloadURL, Exporting, H, HU, OfflineExportingDefaults, U) {\n        /* *\n         *\n         *  Client side exporting module\n         *\n         *  (c) 2015 Torstein Honsi / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* global MSBlobBuilder */\n        const { defaultOptions } = D;\n        const { downloadURL } = DownloadURL;\n        const { win, doc } = H;\n        const { ajax } = HU;\n        const { addEvent, error, extend, fireEvent, merge } = U;\n        AST.allowedAttributes.push('data-z-index', 'fill-opacity', 'rx', 'ry', 'stroke-dasharray', 'stroke-linejoin', 'text-anchor', 'transform', 'version', 'viewBox', 'visibility', 'xmlns', 'xmlns:xlink');\n        AST.allowedTags.push('desc', 'clippath', 'g');\n        /* *\n         *\n         * Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OfflineExporting;\n        (function (OfflineExporting) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            // Dummy object so we can reuse our canvas-tools.js without errors\n            OfflineExporting.CanVGRenderer = {}, OfflineExporting.domurl = win.URL || win.webkitURL || win, \n            // Milliseconds to defer image load event handlers to offset IE bug\n            OfflineExporting.loadEventDeferDelay = H.isMS ? 150 : 0;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extends OfflineExporting with Chart.\n             * @private\n             */\n            function compose(ChartClass) {\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    const chartProto = ChartClass.prototype;\n                    chartProto.getSVGForLocalExport = getSVGForLocalExport;\n                    chartProto.exportChartLocal = exportChartLocal;\n                    // Extend the default options to use the local exporter logic\n                    merge(true, defaultOptions.exporting, OfflineExportingDefaults);\n                }\n                return ChartClass;\n            }\n            OfflineExporting.compose = compose;\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Get data URL to an image of an SVG and call download on it options\n             * object:\n             * - **filename:** Name of resulting downloaded file without extension.\n             * Default is `chart`.\n             *\n             * - **type:** File type of resulting download. Default is `image/png`.\n             *\n             * - **scale:** Scaling factor of downloaded image compared to source.\n             * Default is `1`.\n             *\n             * - **libURL:** URL pointing to location of dependency scripts to download\n             * on demand. Default is the exporting.libURL option of the global\n             * Highcharts options pointing to our server.\n             *\n             * @function Highcharts.downloadSVGLocal\n             *\n             * @param {string} svg\n             * The generated SVG\n             *\n             * @param {Highcharts.ExportingOptions} options\n             * The exporting options\n             *\n             * @param {Function} failCallback\n             * The callback function in case of errors\n             *\n             * @param {Function} [successCallback]\n             * The callback function in case of success\n             *\n             */\n            function downloadSVGLocal(svg, options, failCallback, successCallback) {\n                const dummySVGContainer = doc.createElement('div'), imageType = options.type || 'image/png', filename = ((options.filename || 'chart') +\n                    '.' +\n                    (imageType === 'image/svg+xml' ?\n                        'svg' : imageType.split('/')[1])), scale = options.scale || 1;\n                let svgurl, blob, finallyHandler, libURL = (options.libURL || defaultOptions.exporting.libURL), objectURLRevoke = true, pdfFont = options.pdfFont;\n                // Allow libURL to end with or without fordward slash\n                libURL = libURL.slice(-1) !== '/' ? libURL + '/' : libURL;\n                /*\n                 * Detect if we need to load TTF fonts for the PDF, then load them and\n                 * proceed.\n                 *\n                 * @private\n                 */\n                const loadPdfFonts = (svgElement, callback) => {\n                    const hasNonASCII = (s) => (\n                    // eslint-disable-next-line no-control-regex\n                    /[^\\u0000-\\u007F\\u200B]+/.test(s));\n                    // Register an event in order to add the font once jsPDF is\n                    // initialized\n                    const addFont = (variant, base64) => {\n                        win.jspdf.jsPDF.API.events.push([\n                            'initialized',\n                            function () {\n                                this.addFileToVFS(variant, base64);\n                                this.addFont(variant, 'HighchartsFont', variant);\n                                if (!this.getFontList().HighchartsFont) {\n                                    this.setFont('HighchartsFont');\n                                }\n                            }\n                        ]);\n                    };\n                    // If there are no non-ASCII characters in the SVG, do not use\n                    // bother downloading the font files\n                    if (pdfFont && !hasNonASCII(svgElement.textContent || '')) {\n                        pdfFont = void 0;\n                    }\n                    // Add new font if the URL is declared, #6417.\n                    const variants = ['normal', 'italic', 'bold', 'bolditalic'];\n                    // Shift the first element off the variants and add as a font.\n                    // Then asynchronously trigger the next variant until calling the\n                    // callback when the variants are empty.\n                    let normalBase64;\n                    const shiftAndLoadVariant = () => {\n                        const variant = variants.shift();\n                        // All variants shifted and possibly loaded, proceed\n                        if (!variant) {\n                            return callback();\n                        }\n                        const url = pdfFont && pdfFont[variant];\n                        if (url) {\n                            ajax({\n                                url,\n                                responseType: 'blob',\n                                success: (data, xhr) => {\n                                    const reader = new FileReader();\n                                    reader.onloadend = function () {\n                                        if (typeof this.result === 'string') {\n                                            const base64 = this.result.split(',')[1];\n                                            addFont(variant, base64);\n                                            if (variant === 'normal') {\n                                                normalBase64 = base64;\n                                            }\n                                        }\n                                        shiftAndLoadVariant();\n                                    };\n                                    reader.readAsDataURL(xhr.response);\n                                },\n                                error: shiftAndLoadVariant\n                            });\n                        }\n                        else {\n                            // For other variants, fall back to normal text weight/style\n                            if (normalBase64) {\n                                addFont(variant, normalBase64);\n                            }\n                            shiftAndLoadVariant();\n                        }\n                    };\n                    shiftAndLoadVariant();\n                };\n                /*\n                 * @private\n                 */\n                const downloadPDF = () => {\n                    AST.setElementHTML(dummySVGContainer, svg);\n                    const textElements = dummySVGContainer.getElementsByTagName('text'), \n                    // Copy style property to element from parents if it's not\n                    // there. Searches up hierarchy until it finds prop, or hits the\n                    // chart container.\n                    setStylePropertyFromParents = function (el, propName) {\n                        let curParent = el;\n                        while (curParent && curParent !== dummySVGContainer) {\n                            if (curParent.style[propName]) {\n                                let value = curParent.style[propName];\n                                if (propName === 'fontSize' && /em$/.test(value)) {\n                                    value = Math.round(parseFloat(value) * 16) + 'px';\n                                }\n                                el.style[propName] = value;\n                                break;\n                            }\n                            curParent = curParent.parentNode;\n                        }\n                    };\n                    let titleElements;\n                    // Workaround for the text styling. Making sure it does pick up\n                    // settings for parent elements.\n                    [].forEach.call(textElements, function (el) {\n                        // Workaround for the text styling. making sure it does pick up\n                        // the root element\n                        ['fontFamily', 'fontSize']\n                            .forEach((property) => {\n                            setStylePropertyFromParents(el, property);\n                        });\n                        el.style.fontFamily = pdfFont && pdfFont.normal ?\n                            // Custom PDF font\n                            'HighchartsFont' :\n                            // Generic font (serif, sans-serif etc)\n                            String(el.style.fontFamily &&\n                                el.style.fontFamily.split(' ').splice(-1));\n                        // Workaround for plotband with width, removing title from text\n                        // nodes\n                        titleElements = el.getElementsByTagName('title');\n                        [].forEach.call(titleElements, function (titleElement) {\n                            el.removeChild(titleElement);\n                        });\n                    });\n                    const svgNode = dummySVGContainer.querySelector('svg');\n                    if (svgNode) {\n                        loadPdfFonts(svgNode, () => {\n                            svgToPdf(svgNode, 0, (pdfData) => {\n                                try {\n                                    downloadURL(pdfData, filename);\n                                    if (successCallback) {\n                                        successCallback();\n                                    }\n                                }\n                                catch (e) {\n                                    failCallback(e);\n                                }\n                            });\n                        });\n                    }\n                };\n                // Initiate download depending on file type\n                if (imageType === 'image/svg+xml') {\n                    // SVG download. In this case, we want to use Microsoft specific\n                    // Blob if available\n                    try {\n                        if (typeof win.MSBlobBuilder !== 'undefined') {\n                            blob = new win.MSBlobBuilder();\n                            blob.append(svg);\n                            svgurl = blob.getBlob('image/svg+xml');\n                        }\n                        else {\n                            svgurl = svgToDataUrl(svg);\n                        }\n                        downloadURL(svgurl, filename);\n                        if (successCallback) {\n                            successCallback();\n                        }\n                    }\n                    catch (e) {\n                        failCallback(e);\n                    }\n                }\n                else if (imageType === 'application/pdf') {\n                    if (win.jspdf && win.jspdf.jsPDF) {\n                        downloadPDF();\n                    }\n                    else {\n                        // Must load pdf libraries first. // Don't destroy the object\n                        // URL yet since we are doing things asynchronously. A cleaner\n                        // solution would be nice, but this will do for now.\n                        objectURLRevoke = true;\n                        getScript(libURL + 'jspdf.js', function () {\n                            getScript(libURL + 'svg2pdf.js', downloadPDF);\n                        });\n                    }\n                }\n                else {\n                    // PNG/JPEG download - create bitmap from SVG\n                    svgurl = svgToDataUrl(svg);\n                    finallyHandler = function () {\n                        try {\n                            OfflineExporting.domurl.revokeObjectURL(svgurl);\n                        }\n                        catch (e) {\n                            // Ignore\n                        }\n                    };\n                    // First, try to get PNG by rendering on canvas\n                    imageToDataUrl(svgurl, imageType, {}, scale, function (imageURL) {\n                        // Success\n                        try {\n                            downloadURL(imageURL, filename);\n                            if (successCallback) {\n                                successCallback();\n                            }\n                        }\n                        catch (e) {\n                            failCallback(e);\n                        }\n                    }, function () {\n                        // Failed due to tainted canvas\n                        // Create new and untainted canvas\n                        const canvas = doc.createElement('canvas'), ctx = canvas.getContext('2d'), imageWidth = svg.match(/^<svg[^>]*width\\s*=\\s*\\\"?(\\d+)\\\"?[^>]*>/)[1] * scale, imageHeight = svg.match(/^<svg[^>]*height\\s*=\\s*\\\"?(\\d+)\\\"?[^>]*>/)[1] * scale, downloadWithCanVG = function () {\n                            const v = win.canvg.Canvg.fromString(ctx, svg);\n                            v.start();\n                            try {\n                                downloadURL(win.navigator.msSaveOrOpenBlob ?\n                                    canvas.msToBlob() :\n                                    canvas.toDataURL(imageType), filename);\n                                if (successCallback) {\n                                    successCallback();\n                                }\n                            }\n                            catch (e) {\n                                failCallback(e);\n                            }\n                            finally {\n                                finallyHandler();\n                            }\n                        };\n                        canvas.width = imageWidth;\n                        canvas.height = imageHeight;\n                        if (win.canvg) {\n                            // Use preloaded canvg\n                            downloadWithCanVG();\n                        }\n                        else {\n                            // Must load canVG first. // Don't destroy the object\n                            // URL yet since we are doing things asynchronously. A\n                            // cleaner solution would be nice, but this will do for\n                            // now.\n                            objectURLRevoke = true;\n                            getScript(libURL + 'canvg.js', function () {\n                                downloadWithCanVG();\n                            });\n                        }\n                    }, \n                    // No canvas support\n                    failCallback, \n                    // Failed to load image\n                    failCallback, \n                    // Finally\n                    function () {\n                        if (objectURLRevoke) {\n                            finallyHandler();\n                        }\n                    });\n                }\n            }\n            OfflineExporting.downloadSVGLocal = downloadSVGLocal;\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Exporting and offline-exporting modules required. Export a chart to\n             * an image locally in the user's browser.\n             *\n             * @function Highcharts.Chart#exportChartLocal\n             *\n             * @param  {Highcharts.ExportingOptions} [exportingOptions]\n             *         Exporting options, the same as in\n             *         {@link Highcharts.Chart#exportChart}.\n             *\n             * @param  {Highcharts.Options} [chartOptions]\n             *         Additional chart options for the exported chart. For example\n             *         a different background color can be added here, or\n             *         `dataLabels` for export only.\n             *\n             *\n             * @requires modules/exporting\n             * @requires modules/offline-exporting\n             */\n            function exportChartLocal(exportingOptions, chartOptions) {\n                const chart = this, options = merge(chart.options.exporting, exportingOptions), fallbackToExportServer = function (err) {\n                    if (options.fallbackToExportServer === false) {\n                        if (options.error) {\n                            options.error(options, err);\n                        }\n                        else {\n                            error(28, true); // Fallback disabled\n                        }\n                    }\n                    else {\n                        chart.exportChart(options);\n                    }\n                }, svgSuccess = function (svg) {\n                    // If SVG contains foreignObjects PDF fails in all browsers\n                    // and all exports except SVG will fail in IE, as both CanVG\n                    // and svg2pdf choke on this. Gracefully fall back.\n                    if (svg.indexOf('<foreignObject') > -1 &&\n                        options.type !== 'image/svg+xml' &&\n                        (H.isMS || options.type === 'application/pdf')) {\n                        fallbackToExportServer(new Error('Image type not supported for charts with embedded HTML'));\n                    }\n                    else {\n                        OfflineExporting.downloadSVGLocal(svg, extend({ filename: chart.getFilename() }, options), fallbackToExportServer, () => fireEvent(chart, 'exportChartLocalSuccess'));\n                    }\n                }, \n                // Return true if the SVG contains images with external data. With\n                // the boost module there are `image` elements with encoded PNGs,\n                // these are supported by svg2pdf and should pass (#10243).\n                hasExternalImages = function () {\n                    return [].some.call(chart.container.getElementsByTagName('image'), function (image) {\n                        const href = image.getAttribute('href');\n                        return (href !== '' &&\n                            typeof href === 'string' &&\n                            href.indexOf('data:') !== 0);\n                    });\n                };\n                // If we are on IE and in styled mode, add an allowlist to the renderer\n                // for inline styles that we want to pass through. There are so many\n                // styles by default in IE that we don't want to denylist them all.\n                if (H.isMS && chart.styledMode && !Exporting.inlineAllowlist.length) {\n                    Exporting.inlineAllowlist.push(/^blockSize/, /^border/, /^caretColor/, /^color/, /^columnRule/, /^columnRuleColor/, /^cssFloat/, /^cursor/, /^fill$/, /^fillOpacity/, /^font/, /^inlineSize/, /^length/, /^lineHeight/, /^opacity/, /^outline/, /^parentRule/, /^rx$/, /^ry$/, /^stroke/, /^textAlign/, /^textAnchor/, /^textDecoration/, /^transform/, /^vectorEffect/, /^visibility/, /^x$/, /^y$/);\n                }\n                // Always fall back on:\n                // - MS browsers: Embedded images JPEG/PNG, or any PDF\n                // - Embedded images and PDF\n                if ((H.isMS &&\n                    (options.type === 'application/pdf' ||\n                        chart.container.getElementsByTagName('image').length &&\n                            options.type !== 'image/svg+xml')) || (options.type === 'application/pdf' &&\n                    hasExternalImages())) {\n                    fallbackToExportServer(new Error('Image type not supported for this chart/browser.'));\n                    return;\n                }\n                chart.getSVGForLocalExport(options, chartOptions || {}, fallbackToExportServer, svgSuccess);\n            }\n            /**\n             * Downloads a script and executes a callback when done.\n             *\n             * @private\n             * @function getScript\n             * @param {string} scriptLocation\n             * @param {Function} callback\n             */\n            function getScript(scriptLocation, callback) {\n                const head = doc.getElementsByTagName('head')[0], script = doc.createElement('script');\n                script.type = 'text/javascript';\n                script.src = scriptLocation;\n                script.onload = callback;\n                script.onerror = function () {\n                    error('Error loading script ' + scriptLocation);\n                };\n                head.appendChild(script);\n            }\n            OfflineExporting.getScript = getScript;\n            /**\n             * Get SVG of chart prepared for client side export. This converts\n             * embedded images in the SVG to data URIs. It requires the regular\n             * exporting module. The options and chartOptions arguments are passed\n             * to the getSVGForExport function.\n             *\n             * @private\n             * @function Highcharts.Chart#getSVGForLocalExport\n             * @param {Highcharts.ExportingOptions} options\n             * @param {Highcharts.Options} chartOptions\n             * @param {Function} failCallback\n             * @param {Function} successCallback\n             */\n            function getSVGForLocalExport(options, chartOptions, failCallback, successCallback) {\n                const chart = this, \n                // After grabbing the SVG of the chart's copy container we need\n                // to do sanitation on the SVG\n                sanitize = (svg) => chart.sanitizeSVG(svg, chartCopyOptions), \n                // When done with last image we have our SVG\n                checkDone = () => {\n                    if (images && imagesEmbedded === imagesLength) {\n                        successCallback(sanitize(chartCopyContainer.innerHTML));\n                    }\n                }, \n                // Success handler, we converted image to base64!\n                embeddedSuccess = (imageURL, imageType, callbackArgs) => {\n                    ++imagesEmbedded;\n                    // Change image href in chart copy\n                    callbackArgs.imageElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', imageURL);\n                    checkDone();\n                };\n                let el, chartCopyContainer, chartCopyOptions, href = null, images, imagesLength = 0, imagesEmbedded = 0;\n                // Hook into getSVG to get a copy of the chart copy's\n                // container (#8273)\n                chart.unbindGetSVG = addEvent(chart, 'getSVG', (e) => {\n                    chartCopyOptions = e.chartCopy.options;\n                    chartCopyContainer = e.chartCopy.container.cloneNode(true);\n                    images = chartCopyContainer && chartCopyContainer\n                        .getElementsByTagName('image') || [];\n                    imagesLength = images.length;\n                });\n                // Trigger hook to get chart copy\n                chart.getSVGForExport(options, chartOptions);\n                try {\n                    // If there are no images to embed, the SVG is okay now.\n                    if (!images || !images.length) {\n                        // Use SVG of chart copy\n                        successCallback(sanitize(chartCopyContainer.innerHTML));\n                        return;\n                    }\n                    // Go through the images we want to embed\n                    for (let i = 0; i < images.length; i++) {\n                        el = images[i];\n                        href = el.getAttributeNS('http://www.w3.org/1999/xlink', 'href');\n                        if (href) {\n                            OfflineExporting.imageToDataUrl(href, 'image/png', { imageElement: el }, options.scale, embeddedSuccess, \n                            // Tainted canvas\n                            failCallback, \n                            // No canvas support\n                            failCallback, \n                            // Failed to load source\n                            failCallback);\n                            // Hidden, boosted series have blank href (#10243)\n                        }\n                        else {\n                            imagesEmbedded++;\n                            el.parentNode.removeChild(el);\n                            i--;\n                            checkDone();\n                        }\n                    }\n                }\n                catch (e) {\n                    failCallback(e);\n                }\n                // Clean up\n                chart.unbindGetSVG();\n            }\n            /**\n             * Get data:URL from image URL. Pass in callbacks to handle results.\n             *\n             * @private\n             * @function Highcharts.imageToDataUrl\n             *\n             * @param {string} imageURL\n             *\n             * @param {string} imageType\n             *\n             * @param {*} callbackArgs\n             *        callbackArgs is used only by callbacks.\n             *\n             * @param {number} scale\n             *\n             * @param {Function} successCallback\n             *        Receives four arguments: imageURL, imageType, callbackArgs,\n             *        and scale.\n             *\n             * @param {Function} taintedCallback\n             *        Receives four arguments: imageURL, imageType, callbackArgs,\n             *        and scale.\n             *\n             * @param {Function} noCanvasSupportCallback\n             *        Receives four arguments: imageURL, imageType, callbackArgs,\n             *        and scale.\n             *\n             * @param {Function} failedLoadCallback\n             *        Receives four arguments: imageURL, imageType, callbackArgs,\n             *        and scale.\n             *\n             * @param {Function} [finallyCallback]\n             *        finallyCallback is always called at the end of the process. All\n             *        callbacks receive four arguments: imageURL, imageType,\n             *        callbackArgs, and scale.\n             */\n            function imageToDataUrl(imageURL, imageType, callbackArgs, scale, successCallback, taintedCallback, noCanvasSupportCallback, failedLoadCallback, finallyCallback) {\n                let img = new win.Image(), taintedHandler;\n                const loadHandler = () => {\n                    setTimeout(function () {\n                        const canvas = doc.createElement('canvas'), ctx = canvas.getContext && canvas.getContext('2d');\n                        let dataURL;\n                        try {\n                            if (!ctx) {\n                                noCanvasSupportCallback(imageURL, imageType, callbackArgs, scale);\n                            }\n                            else {\n                                canvas.height = img.height * scale;\n                                canvas.width = img.width * scale;\n                                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                                // Now we try to get the contents of the canvas.\n                                try {\n                                    dataURL = canvas.toDataURL(imageType);\n                                    successCallback(dataURL, imageType, callbackArgs, scale);\n                                }\n                                catch (e) {\n                                    taintedHandler(imageURL, imageType, callbackArgs, scale);\n                                }\n                            }\n                        }\n                        finally {\n                            if (finallyCallback) {\n                                finallyCallback(imageURL, imageType, callbackArgs, scale);\n                            }\n                        }\n                        // IE bug where image is not always ready despite calling load\n                        // event.\n                    }, OfflineExporting.loadEventDeferDelay);\n                }, \n                // Image load failed (e.g. invalid URL)\n                errorHandler = () => {\n                    failedLoadCallback(imageURL, imageType, callbackArgs, scale);\n                    if (finallyCallback) {\n                        finallyCallback(imageURL, imageType, callbackArgs, scale);\n                    }\n                };\n                // This is called on load if the image drawing to canvas failed with a\n                // security error. We retry the drawing with crossOrigin set to\n                // Anonymous.\n                taintedHandler = () => {\n                    img = new win.Image();\n                    taintedHandler = taintedCallback;\n                    // Must be set prior to loading image source\n                    img.crossOrigin = 'Anonymous';\n                    img.onload = loadHandler;\n                    img.onerror = errorHandler;\n                    img.src = imageURL;\n                };\n                img.onload = loadHandler;\n                img.onerror = errorHandler;\n                img.src = imageURL;\n            }\n            OfflineExporting.imageToDataUrl = imageToDataUrl;\n            /**\n             * Get blob URL from SVG code. Falls back to normal data URI.\n             *\n             * @private\n             * @function Highcharts.svgToDataURL\n             */\n            function svgToDataUrl(svg) {\n                // Webkit and not chrome\n                const userAgent = win.navigator.userAgent;\n                const webKit = (userAgent.indexOf('WebKit') > -1 &&\n                    userAgent.indexOf('Chrome') < 0);\n                try {\n                    // Safari requires data URI since it doesn't allow navigation to\n                    // blob URLs. ForeignObjects also dont work well in Blobs in Chrome\n                    // (#14780).\n                    if (!webKit && svg.indexOf('<foreignObject') === -1) {\n                        return OfflineExporting.domurl.createObjectURL(new win.Blob([svg], {\n                            type: 'image/svg+xml;charset-utf-16'\n                        }));\n                    }\n                }\n                catch (e) {\n                    // Ignore\n                }\n                return 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(svg);\n            }\n            OfflineExporting.svgToDataUrl = svgToDataUrl;\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function svgToPdf(svgElement, margin, callback) {\n                const width = Number(svgElement.getAttribute('width')) + 2 * margin, height = Number(svgElement.getAttribute('height')) + 2 * margin, pdfDoc = new win.jspdf.jsPDF(// eslint-disable-line new-cap\n                // setting orientation to portrait if height exceeds width\n                height > width ? 'p' : 'l', 'pt', [width, height]);\n                // Workaround for #7090, hidden elements were drawn anyway. It comes\n                // down to https://github.com/yWorks/svg2pdf.js/issues/28. Check this\n                // later.\n                [].forEach.call(svgElement.querySelectorAll('*[visibility=\"hidden\"]'), function (node) {\n                    node.parentNode.removeChild(node);\n                });\n                // Workaround for #13948, multiple stops in linear gradient set to 0\n                // causing error in Acrobat\n                const gradients = svgElement.querySelectorAll('linearGradient');\n                for (let index = 0; index < gradients.length; index++) {\n                    const gradient = gradients[index];\n                    const stops = gradient.querySelectorAll('stop');\n                    let i = 0;\n                    while (i < stops.length &&\n                        stops[i].getAttribute('offset') === '0' &&\n                        stops[i + 1].getAttribute('offset') === '0') {\n                        stops[i].remove();\n                        i++;\n                    }\n                }\n                // Workaround for #15135, zero width spaces, which Highcharts uses\n                // to break lines, are not correctly rendered in PDF. Replace it\n                // with a regular space and offset by some pixels to compensate.\n                [].forEach.call(svgElement.querySelectorAll('tspan'), (tspan) => {\n                    if (tspan.textContent === '\\u200B') {\n                        tspan.textContent = ' ';\n                        tspan.setAttribute('dx', -5);\n                    }\n                });\n                pdfDoc.svg(svgElement, {\n                    x: 0,\n                    y: 0,\n                    width,\n                    height,\n                    removeInvalid: true\n                }).then(() => callback(pdfDoc.output('datauristring')));\n            }\n            OfflineExporting.svgToPdf = svgToPdf;\n        })(OfflineExporting || (OfflineExporting = {}));\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return OfflineExporting;\n    });\n    _registerModule(_modules, 'masters/modules/offline-exporting.src.js', [_modules['Core/Globals.js'], _modules['Extensions/OfflineExporting/OfflineExporting.js']], function (Highcharts, OfflineExporting) {\n\n        const G = Highcharts;\n        // Compatibility\n        G.downloadSVGLocal = OfflineExporting.downloadSVGLocal;\n        // Compose\n        OfflineExporting.compose(G.Chart);\n\n    });\n}));"],
  "mappings": "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",
  "names": ["factory", "module", "exports", "define", "amd", "Highcharts", "undefined", "_registerModule", "obj", "path", "args", "fn", "hasOwnProperty", "apply", "CustomEvent", "window", "dispatchEvent", "detail", "_modules", "isSafari", "win", "doc", "document", "domurl", "URL", "webkitURL", "dataURLtoBlob", "Highcharts.dataURLtoBlob", "dataURL", "parts", "replace", "match", "length", "atob", "ArrayBuffer", "Uint8Array", "Blob", "createObjectURL", "binStr", "buf", "binary", "i", "charCodeAt", "blob", "downloadURL", "Highcharts.downloadURL", "filename", "nav", "navigator", "a", "createElement", "String", "msSaveOrOpenBlob", "isOldEdgeBrowser", "test", "userAgent", "indexOf", "Error", "download", "href", "body", "appendChild", "click", "removeChild", "windowRef", "open", "e", "location", "DownloadURL", "OfflineExportingDefaults", "libURL", "menuItemDefinitions", "downloadPNG", "textKey", "onclick", "exportChartLocal", "downloadJPEG", "type", "downloadSVG", "downloadPDF", "AST", "Chart", "D", "Exporting", "H", "HU", "U", "defaultOptions", "ajax", "addEvent", "error", "extend", "fireEvent", "merge", "allowedAttributes", "push", "allowedTags", "composedMembers", "OfflineExporting", "exportingOptions", "chartOptions", "chart", "options", "exporting", "fallbackToExportServer", "err", "exportChart", "hasExternalImages", "some", "call", "container", "getElementsByTagName", "image", "getAttribute", "isMS", "styledMode", "inlineAllowlist", "getSVGForLocalExport", "svgSuccess", "svg", "downloadSVGLocal", "getFilename", "getScript", "scriptLocation", "callback", "head", "script", "src", "onload", "onerror", "script.onerror", "failCallback", "successCallback", "embeddedSuccess", "imageURL", "imageType", "callbackArgs", "imagesEmbedded", "imageElement", "setAttributeNS", "images", "imagesLength", "sanitizeSVG", "chartCopyContainer", "innerHTML", "chartCopyOptions", "el", "unbindGetSVG", "chartCopy", "cloneNode", "getSVGForExport", "getAttributeNS", "imageToDataUrl", "scale", "parentNode", "taintedCallback", "noCanvasSupportCallback", "failedLoadCallback", "finallyCallback", "img", "Image", "taintedHandler", "loadHandler", "setTimeout", "canvas", "ctx", "getContext", "height", "width", "drawImage", "toDataURL", "loadEventDeferDelay", "errorHandler", "crossOrigin", "svgToDataUrl", "webKit", "encodeURIComponent", "svgToPdf", "svgElement", "margin", "Number", "pdfDoc", "jspdf", "jsPDF", "forEach", "querySelectorAll", "node", "gradients", "index", "stops", "gradient", "remove", "tspan", "textContent", "setAttribute", "x", "y", "removeInvalid", "then", "output", "CanVGRenderer", "compose", "ChartClass", "pushUnique", "chartProto", "prototype", "dummySVGContainer", "split", "svgurl", "finallyHandler", "objectURLRevoke", "pdfFont", "slice", "loadPdfFonts", "addFont", "variant", "base64", "API", "events", "addFileToVFS", "getFontList", "HighchartsFont", "setFont", "variants", "normalBase64", "shiftAndLoadVariant", "shift", "url", "responseType", "success", "data", "xhr", "reader", "FileReader", "onloadend", "reader.onloadend", "result", "readAsDataURL", "response", "setElementHTML", "textElements", "titleElements", "property", "curParent", "style", "value", "Math", "round", "parseFloat", "fontFamily", "normal", "splice", "titleElement", "svgNode", "querySelector", "pdfData", "MSBlobBuilder", "append", "getBlob", "revokeObjectURL", "imageWidth", "imageHeight", "downloadWithCanVG", "canvg", "Canvg", "fromString", "v", "start", "msToBlob"]
}
