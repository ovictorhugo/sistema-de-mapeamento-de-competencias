{
  "version": 3,
  "sources": ["../../highcharts/modules/exporting.src.js"],
  "sourcesContent": ["/**\n * @license Highcharts JS v11.1.0 (2023-06-05)\n *\n * Exporting module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/exporting', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Chart/ChartNavigationComposition.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2021 PaweÅ‚ Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ChartNavigationComposition;\n        (function (ChartNavigationComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(chart) {\n                if (!chart.navigation) {\n                    chart.navigation = new Additions(chart);\n                }\n                return chart;\n            }\n            ChartNavigationComposition.compose = compose;\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Initializes `chart.navigation` object which delegates `update()` methods\n             * to all other common classes (used in exporting and navigationBindings).\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructor\n                 *\n                 * */\n                constructor(chart) {\n                    this.updates = [];\n                    this.chart = chart;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Registers an `update()` method in the `chart.navigation` object.\n                 *\n                 * @private\n                 * @param {UpdateFunction} updateFn\n                 * The `update()` method that will be called in `chart.update()`.\n                 */\n                addUpdate(updateFn) {\n                    this.chart.navigation.updates.push(updateFn);\n                }\n                /**\n                 * @private\n                 */\n                update(options, redraw) {\n                    this.updates.forEach((updateFn) => {\n                        updateFn.call(this.chart, options, redraw);\n                    });\n                }\n            }\n            ChartNavigationComposition.Additions = Additions;\n        })(ChartNavigationComposition || (ChartNavigationComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartNavigationComposition;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        // Add the export related options\n        /**\n         * Options for the exporting module. For an overview on the matter, see\n         * [the docs](https://www.highcharts.com/docs/export-module/export-module-overview).\n         *\n         * @requires     modules/exporting\n         * @optionparent exporting\n         */\n        const exporting = {\n            /**\n             * Experimental setting to allow HTML inside the chart (added through\n             * the `useHTML` options), directly in the exported image. This allows\n             * you to preserve complicated HTML structures like tables or bi-directional\n             * text in exported charts.\n             *\n             * Disclaimer: The HTML is rendered in a `foreignObject` tag in the\n             * generated SVG. The official export server is based on PhantomJS,\n             * which supports this, but other SVG clients, like Batik, does not\n             * support it. This also applies to downloaded SVG that you want to\n             * open in a desktop client.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.8\n             * @apioption exporting.allowHTML\n             */\n            /**\n             * Allows the end user to sort the data table by clicking on column headers.\n             *\n             * @since 10.3.3\n             * @apioption exporting.allowTableSorting\n             */\n            allowTableSorting: true,\n            /**\n             * Additional chart options to be merged into the chart before exporting to\n             * an image format. This does not apply to printing the chart via the export\n             * menu.\n             *\n             * For example, a common use case is to add data labels to improve\n             * readability of the exported chart, or to add a printer-friendly color\n             * scheme to exported PDFs.\n             *\n             * @sample {highcharts} highcharts/exporting/chartoptions-data-labels/\n             *         Added data labels\n             * @sample {highstock} highcharts/exporting/chartoptions-data-labels/\n             *         Added data labels\n             *\n             * @type      {Highcharts.Options}\n             * @apioption exporting.chartOptions\n             */\n            /**\n             * Whether to enable the exporting module. Disabling the module will\n             * hide the context button, but API methods will still be available.\n             *\n             * @sample {highcharts} highcharts/exporting/enabled-false/\n             *         Exporting module is loaded but disabled\n             * @sample {highstock} highcharts/exporting/enabled-false/\n             *         Exporting module is loaded but disabled\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     2.0\n             * @apioption exporting.enabled\n             */\n            /**\n             * Function to call if the offline-exporting module fails to export\n             * a chart on the client side, and [fallbackToExportServer](\n             * #exporting.fallbackToExportServer) is disabled. If left undefined, an\n             * exception is thrown instead. Receives two parameters, the exporting\n             * options, and the error from the module.\n             *\n             * @see [fallbackToExportServer](#exporting.fallbackToExportServer)\n             *\n             * @type      {Highcharts.ExportingErrorCallbackFunction}\n             * @since     5.0.0\n             * @requires  modules/exporting\n             * @requires  modules/offline-exporting\n             * @apioption exporting.error\n             */\n            /**\n             * Whether or not to fall back to the export server if the offline-exporting\n             * module is unable to export the chart on the client side. This happens for\n             * certain browsers, and certain features (e.g.\n             * [allowHTML](#exporting.allowHTML)), depending on the image type exporting\n             * to. For very complex charts, it is possible that export can fail in\n             * browsers that don't support Blob objects, due to data URL length limits.\n             * It is recommended to define the [exporting.error](#exporting.error)\n             * handler if disabling fallback, in order to notify users in case export\n             * fails.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     4.1.8\n             * @requires  modules/exporting\n             * @requires  modules/offline-exporting\n             * @apioption exporting.fallbackToExportServer\n             */\n            /**\n             * The filename, without extension, to use for the exported chart.\n             *\n             * @sample {highcharts} highcharts/exporting/filename/\n             *         Custom file name\n             * @sample {highstock} highcharts/exporting/filename/\n             *         Custom file name\n             *\n             * @type      {string}\n             * @default   chart\n             * @since     2.0\n             * @apioption exporting.filename\n             */\n            /**\n             * An object containing additional key value data for the POST form that\n             * sends the SVG to the export server. For example, a `target` can be set to\n             * make sure the generated image is received in another frame, or a custom\n             * `enctype` or `encoding` can be set.\n             *\n             * @type      {Highcharts.HTMLAttributes}\n             * @since     3.0.8\n             * @apioption exporting.formAttributes\n             */\n            /**\n             * Path where Highcharts will look for export module dependencies to\n             * load on demand if they don't already exist on `window`. Should currently\n             * point to location of [CanVG](https://github.com/canvg/canvg) library,\n             * [jsPDF](https://github.com/parallax/jsPDF) and\n             * [svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\n             * side export in certain browsers.\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/{version}/lib\n             * @since     5.0.0\n             * @apioption exporting.libURL\n             */\n            /**\n             * Analogous to [sourceWidth](#exporting.sourceWidth).\n             *\n             * @type      {number}\n             * @since     3.0\n             * @apioption exporting.sourceHeight\n             */\n            /**\n             * The width of the original chart when exported, unless an explicit\n             * [chart.width](#chart.width) is set, or a pixel width is set on the\n             * container. The width exported raster image is then multiplied by\n             * [scale](#exporting.scale).\n             *\n             * @sample {highcharts} highcharts/exporting/sourcewidth/\n             *         Source size demo\n             * @sample {highstock} highcharts/exporting/sourcewidth/\n             *         Source size demo\n             * @sample {highmaps} maps/exporting/sourcewidth/\n             *         Source size demo\n             *\n             * @type      {number}\n             * @since     3.0\n             * @apioption exporting.sourceWidth\n             */\n            /**\n             * The pixel width of charts exported to PNG or JPG. As of Highcharts\n             * 3.0, the default pixel width is a function of the [chart.width](\n             * #chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n             * [exporting.scale](#exporting.scale).\n             *\n             * @sample {highcharts} highcharts/exporting/width/\n             *         Export to 200px wide images\n             * @sample {highstock} highcharts/exporting/width/\n             *         Export to 200px wide images\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption exporting.width\n             */\n            /**\n             * Default MIME type for exporting if `chart.exportChart()` is called\n             * without specifying a `type` option. Possible values are `image/png`,\n             *  `image/jpeg`, `application/pdf` and `image/svg+xml`.\n             *\n             * @type  {Highcharts.ExportingMimeTypeValue}\n             * @since 2.0\n             */\n            type: 'image/png',\n            /**\n             * The URL for the server module converting the SVG string to an image\n             * format. By default this points to Highchart's free web service.\n             *\n             * @since 2.0\n             */\n            url: 'https://export.highcharts.com/',\n            /**\n             * Settings for a custom font for the exported PDF, when using the\n             * `offline-exporting` module. This is used for languages containing\n             * non-ASCII characters, like Chinese, Russian, Japanese etc.\n             *\n             * As described in the [jsPDF\n             * docs](https://github.com/parallax/jsPDF#use-of-unicode-characters--utf-8),\n             * the 14 standard fonts in PDF are limited to the ASCII-codepage.\n             * Therefore, in order to support other text in the exported PDF, one or\n             * more TTF font files have to be passed on to the exporting module.\n             *\n             * See more in [the\n             * docs](https://www.highcharts.com/docs/export-module/client-side-export).\n             *\n             * @sample {highcharts} highcharts/exporting/offline-download-pdffont/\n             *         Download PDF in a language containing non-Latin characters.\n             *\n             * @since 10.0.0\n             * @requires modules/offline-exporting\n             */\n            pdfFont: {\n                /**\n                 * The TTF font file for normal `font-style`. If font variations like\n                 * `bold` or `italic` are not defined, the `normal` font will be used\n                 * for those too.\n                 *\n                 * @type string|undefined\n                 */\n                normal: void 0,\n                /**\n                 * The TTF font file for bold text.\n                 *\n                 * @type string|undefined\n                 */\n                bold: void 0,\n                /**\n                 * The TTF font file for bold and italic text.\n                 *\n                 * @type string|undefined\n                 */\n                bolditalic: void 0,\n                /**\n                 * The TTF font file for italic text.\n                 *\n                 * @type string|undefined\n                 */\n                italic: void 0\n            },\n            /**\n             * When printing the chart from the menu item in the burger menu, if\n             * the on-screen chart exceeds this width, it is resized. After printing\n             * or cancelled, it is restored. The default width makes the chart\n             * fit into typical paper format. Note that this does not affect the\n             * chart when printing the web page as a whole.\n             *\n             * @since 4.2.5\n             */\n            printMaxWidth: 780,\n            /**\n             * Defines the scale or zoom factor for the exported image compared\n             * to the on-screen display. While for instance a 600px wide chart\n             * may look good on a website, it will look bad in print. The default\n             * scale of 2 makes this chart export to a 1200px PNG or JPG.\n             *\n             * @see [chart.width](#chart.width)\n             * @see [exporting.sourceWidth](#exporting.sourceWidth)\n             *\n             * @sample {highcharts} highcharts/exporting/scale/\n             *         Scale demonstrated\n             * @sample {highstock} highcharts/exporting/scale/\n             *         Scale demonstrated\n             * @sample {highmaps} maps/exporting/scale/\n             *         Scale demonstrated\n             *\n             * @since 3.0\n             */\n            scale: 2,\n            /**\n             * Options for the export related buttons, print and export. In addition\n             * to the default buttons listed here, custom buttons can be added.\n             * See [navigation.buttonOptions](#navigation.buttonOptions) for general\n             * options.\n             *\n             * @type     {Highcharts.Dictionary<*>}\n             * @requires modules/exporting\n             */\n            buttons: {\n                /**\n                 * Options for the export button.\n                 *\n                 * In styled mode, export button styles can be applied with the\n                 * `.highcharts-contextbutton` class.\n                 *\n                 * @declare  Highcharts.ExportingButtonsOptionsObject\n                 * @extends  navigation.buttonOptions\n                 * @requires modules/exporting\n                 */\n                contextButton: {\n                    /**\n                     * A click handler callback to use on the button directly instead of\n                     * the popup menu.\n                     *\n                     * @sample highcharts/exporting/buttons-contextbutton-onclick/\n                     *         Skip the menu and export the chart directly\n                     *\n                     * @type      {Function}\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.onclick\n                     */\n                    /**\n                     * See [navigation.buttonOptions.symbolFill](\n                     * #navigation.buttonOptions.symbolFill).\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @default   #666666\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.symbolFill\n                     */\n                    /**\n                     * The horizontal position of the button relative to the `align`\n                     * option.\n                     *\n                     * @type      {number}\n                     * @default   -10\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.x\n                     */\n                    /**\n                     * The class name of the context button.\n                     */\n                    className: 'highcharts-contextbutton',\n                    /**\n                     * The class name of the menu appearing from the button.\n                     */\n                    menuClassName: 'highcharts-contextmenu',\n                    /**\n                     * The symbol for the button. Points to a definition function in\n                     * the `Highcharts.Renderer.symbols` collection. The default\n                     * `menu` function is part of the exporting module. Possible\n                     * values are \"circle\", \"square\", \"diamond\", \"triangle\",\n                     * \"triangle-down\", \"menu\", \"menuball\" or custom shape.\n                     *\n                     * @sample highcharts/exporting/buttons-contextbutton-symbol/\n                     *         Use a circle for symbol\n                     * @sample highcharts/exporting/buttons-contextbutton-symbol-custom/\n                     *         Custom shape as symbol\n                     *\n                     * @type  {Highcharts.SymbolKeyValue|\"menu\"|\"menuball\"|string}\n                     * @since 2.0\n                     */\n                    symbol: 'menu',\n                    /**\n                     * The key to a [lang](#lang) option setting that is used for the\n                     * button's title tooltip. When the key is `contextButtonTitle`, it\n                     * refers to [lang.contextButtonTitle](#lang.contextButtonTitle)\n                     * that defaults to \"Chart context menu\".\n                     *\n                     * @since 6.1.4\n                     */\n                    titleKey: 'contextButtonTitle',\n                    /**\n                     * This option is deprecated, use\n                     * [titleKey](#exporting.buttons.contextButton.titleKey) instead.\n                     *\n                     * @deprecated\n                     * @type      {string}\n                     * @apioption exporting.buttons.contextButton._titleKey\n                     */\n                    /**\n                     * A collection of strings pointing to config options for the menu\n                     * items. The config options are defined in the\n                     * `menuItemDefinitions` option.\n                     *\n                     * By default, there is the \"View in full screen\" and \"Print\" menu\n                     * items, plus one menu item for each of the available export types.\n                     *\n                     * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     *\n                     * @type    {Array<string>}\n                     * @default [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]\n                     * @since   2.0\n                     */\n                    menuItems: [\n                        'viewFullscreen',\n                        'printChart',\n                        'separator',\n                        'downloadPNG',\n                        'downloadJPEG',\n                        'downloadPDF',\n                        'downloadSVG'\n                    ]\n                }\n            },\n            /**\n             * An object consisting of definitions for the menu items in the context\n             * menu. Each key value pair has a `key` that is referenced in the\n             * [menuItems](#exporting.buttons.contextButton.menuItems) setting,\n             * and a `value`, which is an object with the following properties:\n             *\n             * - **onclick:** The click handler for the menu item\n             *\n             * - **text:** The text for the menu item\n             *\n             * - **textKey:** If internationalization is required, the key to a language\n             *   string\n             *\n             * Custom text for the \"exitFullScreen\" can be set only in lang options\n             * (it is not a separate button).\n             *\n             * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             *\n             *\n             * @type    {Highcharts.Dictionary<Highcharts.ExportingMenuObject>}\n             * @default {\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}\n             * @since   5.0.13\n             */\n            menuItemDefinitions: {\n                /**\n                 * @ignore\n                 */\n                viewFullscreen: {\n                    textKey: 'viewFullscreen',\n                    onclick: function () {\n                        if (this.fullscreen) {\n                            this.fullscreen.toggle();\n                        }\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                printChart: {\n                    textKey: 'printChart',\n                    onclick: function () {\n                        this.print();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                separator: {\n                    separator: true\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPNG: {\n                    textKey: 'downloadPNG',\n                    onclick: function () {\n                        this.exportChart();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadJPEG: {\n                    textKey: 'downloadJPEG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/jpeg'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPDF: {\n                    textKey: 'downloadPDF',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'application/pdf'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadSVG: {\n                    textKey: 'downloadSVG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/svg+xml'\n                        });\n                    }\n                }\n            }\n        };\n        // Add language\n        /**\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * Exporting module only. The text for the menu item to view the chart\n             * in full screen.\n             *\n             * @since 8.0.1\n             */\n            viewFullscreen: 'View in full screen',\n            /**\n             * Exporting module only. The text for the menu item to exit the chart\n             * from full screen.\n             *\n             * @since 8.0.1\n             */\n            exitFullscreen: 'Exit from full screen',\n            /**\n             * Exporting module only. The text for the menu item to print the chart.\n             *\n             * @since    3.0.1\n             * @requires modules/exporting\n             */\n            printChart: 'Print chart',\n            /**\n             * Exporting module only. The text for the PNG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadPNG: 'Download PNG image',\n            /**\n             * Exporting module only. The text for the JPEG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadJPEG: 'Download JPEG image',\n            /**\n             * Exporting module only. The text for the PDF download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadPDF: 'Download PDF document',\n            /**\n             * Exporting module only. The text for the SVG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadSVG: 'Download SVG vector image',\n            /**\n             * Exporting module menu. The tooltip title for the context menu holding\n             * print and export menu items.\n             *\n             * @since    3.0\n             * @requires modules/exporting\n             */\n            contextButtonTitle: 'Chart context menu'\n        };\n        /**\n         * A collection of options for buttons and menus appearing in the exporting\n         * module or in Stock Tools.\n         *\n         * @requires     modules/exporting\n         * @optionparent navigation\n         */\n        const navigation = {\n            /**\n             * A collection of options for buttons appearing in the exporting\n             * module.\n             *\n             * In styled mode, the buttons are styled with the\n             * `.highcharts-contextbutton` and `.highcharts-button-symbol` classes.\n             *\n             * @requires modules/exporting\n             */\n            buttonOptions: {\n                /**\n                 * Whether to enable buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-enabled/\n                 *         Exporting module loaded but buttons disabled\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     2.0\n                 * @apioption navigation.buttonOptions.enabled\n                 */\n                /**\n                 * The pixel size of the symbol on the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolSize: 14,\n                /**\n                 * The x position of the center of the symbol inside the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolX: 14.5,\n                /**\n                 * The y position of the center of the symbol inside the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolY: 13.5,\n                /**\n                 * Alignment for the buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-align/\n                 *         Center aligned\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'right',\n                /**\n                 * The pixel spacing between buttons.\n                 *\n                 * @since 2.0\n                 */\n                buttonSpacing: 3,\n                /**\n                 * Pixel height of the buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                height: 28,\n                /**\n                 * A text string to add to the individual button.\n                 *\n                 * @sample highcharts/exporting/buttons-text/\n                 *         Full text button\n                 * @sample highcharts/exporting/buttons-text-usehtml/\n                 *         Icon using CSS font in text\n                 * @sample highcharts/exporting/buttons-text-symbol/\n                 *         Combined symbol and text\n                 *\n                 * @type      {string}\n                 * @default   null\n                 * @since     3.0\n                 * @apioption navigation.buttonOptions.text\n                 */\n                /**\n                 * Whether to use HTML for rendering the button. HTML allows for things\n                 * like inline CSS or image-based icons.\n                 *\n                 * @sample highcharts/exporting/buttons-text-usehtml/\n                 *         Icon using CSS font in text\n                 *\n                 * @type      boolean\n                 * @default   false\n                 * @since 10.3.0\n                 * @apioption navigation.buttonOptions.useHTML\n                 */\n                /**\n                 * The vertical offset of the button's position relative to its\n                 * `verticalAlign`.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-verticalalign/\n                 *         Buttons at lower right\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption navigation.buttonOptions.y\n                 */\n                /**\n                 * The vertical alignment of the buttons. Can be one of `\"top\"`,\n                 * `\"middle\"` or `\"bottom\"`.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-verticalalign/\n                 *         Buttons at lower right\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The pixel width of the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                width: 28,\n                /**\n                 * Fill color for the symbol within the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-symbolfill/\n                 *         Blue symbol stroke for one of the buttons\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 2.0\n                 */\n                symbolFill: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The color of the symbol's stroke or line.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-symbolstroke/\n                 *         Blue symbol stroke\n                 *\n                 * @type  {Highcharts.ColorString}\n                 * @since 2.0\n                 */\n                symbolStroke: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The pixel stroke width of the symbol on the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolStrokeWidth: 3,\n                /**\n                 * A configuration object for the button theme. The object accepts\n                 * SVG properties like `stroke-width`, `stroke` and `fill`.\n                 * Tri-state button styles are supported by the `states.hover` and\n                 * `states.select` objects.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-theme/\n                 *         Theming the buttons\n                 *\n                 * @requires modules/exporting\n                 *\n                 * @since 3.0\n                 */\n                theme: {\n                    /**\n                     * The default fill exists only to capture hover events.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @default   #ffffff\n                     * @apioption navigation.buttonOptions.theme.fill\n                     */\n                    /**\n                     * Default stroke for the buttons.\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @default   none\n                     * @apioption navigation.buttonOptions.theme.stroke\n                     */\n                    /**\n                     * Padding for the button.\n                     */\n                    padding: 5\n                }\n            },\n            /**\n             * CSS styles for the popup menu appearing by default when the export\n             * icon is clicked. This menu is rendered in HTML.\n             *\n             * @see In styled mode, the menu is styled with the `.highcharts-menu`\n             *      class.\n             *\n             * @sample highcharts/navigation/menustyle/\n             *         Light gray menu background\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"background\": \"#ffffff\", \"borderRadius\": \"3px\", \"padding\": \"0.5em\"}\n             * @since   2.0\n             */\n            menuStyle: {\n                /** @ignore-option */\n                border: 'none',\n                /** @ignore-option */\n                borderRadius: '3px',\n                /** @ignore-option */\n                background: \"#ffffff\" /* Palette.backgroundColor */,\n                /** @ignore-option */\n                padding: '0.5em'\n            },\n            /**\n             * CSS styles for the individual items within the popup menu appearing\n             * by default when the export icon is clicked. The menu items are\n             * rendered in HTML. Font size defaults to `11px` on desktop and `14px`\n             * on touch devices.\n             *\n             * @see In styled mode, the menu items are styled with the\n             *      `.highcharts-menu-item` class.\n             *\n             * @sample {highcharts} highcharts/navigation/menuitemstyle/\n             *         Add a grey stripe to the left\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"padding\": \"0.5em\", \"color\": \"#333333\", \"background\": \"none\", \"borderRadius\": \"3px\", \"fontSize\": \"0.8em\", \"transition\": \"background 250ms, color 250ms\"}\n             * @since   2.0\n             */\n            menuItemStyle: {\n                /** @ignore-option */\n                background: 'none',\n                /** @ignore-option */\n                borderRadius: '3px',\n                /** @ignore-option */\n                color: \"#333333\" /* Palette.neutralColor80 */,\n                /** @ignore-option */\n                padding: '0.5em',\n                /** @ignore-option */\n                fontSize: isTouchDevice ? '0.9em' : '0.8em',\n                /** @ignore-option */\n                transition: 'background 250ms, color 250ms'\n            },\n            /**\n             * CSS styles for the hover state of the individual items within the\n             * popup menu appearing by default when the export icon is clicked. The\n             * menu items are rendered in HTML.\n             *\n             * @see In styled mode, the menu items are styled with the\n             *      `.highcharts-menu-item` class.\n             *\n             * @sample highcharts/navigation/menuitemhoverstyle/\n             *         Bold text on hover\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"background\": \"#f2f2f2\" }\n             * @since   2.0\n             */\n            menuItemHoverStyle: {\n                /** @ignore-option */\n                background: \"#f2f2f2\" /* Palette.neutralColor5 */\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ExportingDefaults = {\n            exporting,\n            lang,\n            navigation\n        };\n\n        return ExportingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingSymbols.js', [], function () {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ExportingSymbols;\n        (function (ExportingSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const modifiedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedClasses.indexOf(SVGRendererClass) === -1) {\n                    modifiedClasses.push(SVGRendererClass);\n                    const symbols = SVGRendererClass.prototype.symbols;\n                    symbols.menu = menu;\n                    symbols.menuball = menuball.bind(symbols);\n                }\n            }\n            ExportingSymbols.compose = compose;\n            /**\n             * @private\n             */\n            function menu(x, y, width, height) {\n                const arr = [\n                    ['M', x, y + 2.5],\n                    ['L', x + width, y + 2.5],\n                    ['M', x, y + height / 2 + 0.5],\n                    ['L', x + width, y + height / 2 + 0.5],\n                    ['M', x, y + height - 1.5],\n                    ['L', x + width, y + height - 1.5]\n                ];\n                return arr;\n            }\n            /**\n             * @private\n             */\n            function menuball(x, y, width, height) {\n                const h = (height / 3) - 2;\n                let path = [];\n                path = path.concat(this.circle(width - h, y, h, h), this.circle(width - h, y + h + 4, h, h), this.circle(width - h, y + 2 * (h + 4), h, h));\n                return path;\n            }\n        })(ExportingSymbols || (ExportingSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ExportingSymbols;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Fullscreen.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Rafal Sebestjanski\n         *\n         *  Full screen for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, fireEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new Fullscreen(this);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         *\n         * @requires modules/exporting\n         */\n        class Fullscreen {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Prepares the chart class to support fullscreen.\n             *\n             * @param {typeof_Highcharts.Chart} ChartClass\n             * The chart class to decorate with fullscreen support.\n             */\n            static compose(ChartClass) {\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    // Initialize fullscreen\n                    addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(chart) {\n                /**\n                 * Chart managed by the fullscreen controller.\n                 * @name Highcharts.Fullscreen#chart\n                 * @type {Highcharts.Chart}\n                 */\n                this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                const container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            close() {\n                const fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenClose', null, function () {\n                    // Don't fire exitFullscreen() when user exited\n                    // using 'Escape' button.\n                    if (fullscreen.isOpen &&\n                        fullscreen.browserProps &&\n                        chart.container.ownerDocument instanceof Document) {\n                        chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                    }\n                    // Unbind event as it's necessary only before exiting\n                    // from fullscreen.\n                    if (fullscreen.unbindFullscreenEvent) {\n                        fullscreen.unbindFullscreenEvent = fullscreen\n                            .unbindFullscreenEvent();\n                    }\n                    chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                    fullscreen.origWidth = void 0;\n                    fullscreen.origHeight = void 0;\n                    optionsChart.width = fullscreen.origWidthOption;\n                    optionsChart.height = fullscreen.origHeightOption;\n                    fullscreen.origWidthOption = void 0;\n                    fullscreen.origHeightOption = void 0;\n                    fullscreen.isOpen = false;\n                    fullscreen.setButtonText();\n                });\n            }\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            open() {\n                const fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenOpen', null, function () {\n                    if (optionsChart) {\n                        fullscreen.origWidthOption = optionsChart.width;\n                        fullscreen.origHeightOption = optionsChart.height;\n                    }\n                    fullscreen.origWidth = chart.chartWidth;\n                    fullscreen.origHeight = chart.chartHeight;\n                    // Handle exitFullscreen() method when user clicks 'Escape' button.\n                    if (fullscreen.browserProps) {\n                        const unbindChange = addEvent(chart.container.ownerDocument, // chart's document\n                        fullscreen.browserProps.fullscreenChange, function () {\n                            // Handle lack of async of browser's\n                            // fullScreenChange event.\n                            if (fullscreen.isOpen) {\n                                fullscreen.isOpen = false;\n                                fullscreen.close();\n                            }\n                            else {\n                                chart.setSize(null, null, false);\n                                fullscreen.isOpen = true;\n                                fullscreen.setButtonText();\n                            }\n                        });\n                        const unbindDestroy = addEvent(chart, 'destroy', unbindChange);\n                        fullscreen.unbindFullscreenEvent = () => {\n                            unbindChange();\n                            unbindDestroy();\n                        };\n                        const promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                        if (promise) {\n                            promise['catch'](function () {\n                                alert(// eslint-disable-line no-alert\n                                'Full screen is not supported inside a frame.');\n                            });\n                        }\n                    }\n                });\n            }\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            setButtonText() {\n                const chart = this.chart, exportDivElements = chart.exportDivElements, exportingOptions = chart.options.exporting, menuItems = (exportingOptions &&\n                    exportingOptions.buttons &&\n                    exportingOptions.buttons.contextButton.menuItems), lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    const exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            }\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            toggle() {\n                const fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired when closing the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired when opening the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        (''); // keeps doclets above separated from following code\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires when a fullscreen is closed through the context menu item,\n         * or a fullscreen is closed on the `Escape` button click,\n         * or the `Chart.fullscreen.close` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenClose\n         */\n        /**\n         * Fires when a fullscreen is opened through the context menu item,\n         * or the `Chart.fullscreen.open` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenOpen\n         */\n        (''); // keeps doclets above in transpiled file\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'Core/HttpUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (G, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Christer Vasseng, Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc } = G;\n        const { createElement, discardElement, merge, objectEach } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Perform an Ajax call.\n         *\n         * @function Highcharts.ajax\n         *\n         * @param {Highcharts.AjaxSettingsObject} settings\n         *        The Ajax settings to use.\n         *\n         * @return {false|undefined}\n         *         Returns false, if error occured.\n         */\n        function ajax(settings) {\n            const headers = {\n                json: 'application/json',\n                xml: 'application/xml',\n                text: 'text/plain',\n                octet: 'application/octet-stream'\n            }, r = new XMLHttpRequest();\n            /**\n             * Private error handler.\n             * @private\n             * @param {XMLHttpRequest} xhr\n             * Internal request object.\n             * @param {string|Error} err\n             * Occured error.\n             */\n            function handleError(xhr, err) {\n                if (settings.error) {\n                    settings.error(xhr, err);\n                }\n                else {\n                    // @todo Maybe emit a highcharts error event here\n                }\n            }\n            if (!settings.url) {\n                return false;\n            }\n            r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n            if (!settings.headers || !settings.headers['Content-Type']) {\n                r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n            }\n            objectEach(settings.headers, function (val, key) {\n                r.setRequestHeader(key, val);\n            });\n            if (settings.responseType) {\n                r.responseType = settings.responseType;\n            }\n            // @todo lacking timeout handling\n            r.onreadystatechange = function () {\n                let res;\n                if (r.readyState === 4) {\n                    if (r.status === 200) {\n                        if (settings.responseType !== 'blob') {\n                            res = r.responseText;\n                            if (settings.dataType === 'json') {\n                                try {\n                                    res = JSON.parse(res);\n                                }\n                                catch (e) {\n                                    if (e instanceof Error) {\n                                        return handleError(r, e);\n                                    }\n                                }\n                            }\n                        }\n                        return settings.success && settings.success(res, r);\n                    }\n                    handleError(r, r.responseText);\n                }\n            };\n            if (settings.data && typeof settings.data !== 'string') {\n                settings.data = JSON.stringify(settings.data);\n            }\n            r.send(settings.data);\n        }\n        /**\n         * Get a JSON resource over XHR, also supporting CORS without preflight.\n         *\n         * @function Highcharts.getJSON\n         * @param {string} url\n         *        The URL to load.\n         * @param {Function} success\n         *        The success callback. For error handling, use the `Highcharts.ajax`\n         *        function instead.\n         */\n        function getJSON(url, success) {\n            HttpUtilities.ajax({\n                url: url,\n                success: success,\n                dataType: 'json',\n                headers: {\n                    // Override the Content-Type to avoid preflight problems with CORS\n                    // in the Highcharts demos\n                    'Content-Type': 'text/plain'\n                }\n            });\n        }\n        /**\n         * The post utility\n         *\n         * @private\n         * @function Highcharts.post\n         *\n         * @param {string} url\n         * Post URL\n         *\n         * @param {Object} data\n         * Post data\n         *\n         * @param {Highcharts.Dictionary<string>} [formAttributes]\n         * Additional attributes for the post request\n         */\n        function post(url, data, formAttributes) {\n            // create the form\n            const form = createElement('form', merge({\n                method: 'post',\n                action: url,\n                enctype: 'multipart/form-data'\n            }, formAttributes), {\n                display: 'none'\n            }, doc.body);\n            // add the data\n            objectEach(data, function (val, name) {\n                createElement('input', {\n                    type: 'hidden',\n                    name: name,\n                    value: val\n                }, void 0, form);\n            });\n            // submit\n            form.submit();\n            // clean up\n            discardElement(form);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HttpUtilities = {\n            ajax,\n            getJSON,\n            post\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.AjaxSettingsObject\n         */ /**\n        * The payload to send.\n        *\n        * @name Highcharts.AjaxSettingsObject#data\n        * @type {string|Highcharts.Dictionary<any>|undefined}\n        */ /**\n        * The data type expected.\n        * @name Highcharts.AjaxSettingsObject#dataType\n        * @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n        */ /**\n        * Function to call on error.\n        * @name Highcharts.AjaxSettingsObject#error\n        * @type {Function|undefined}\n        */ /**\n        * The headers; keyed on header name.\n        * @name Highcharts.AjaxSettingsObject#headers\n        * @type {Highcharts.Dictionary<string>|undefined}\n        */ /**\n        * Function to call on success.\n        * @name Highcharts.AjaxSettingsObject#success\n        * @type {Function|undefined}\n        */ /**\n        * The HTTP method to use. For example GET or POST.\n        * @name Highcharts.AjaxSettingsObject#type\n        * @type {string|undefined}\n        */ /**\n        * The URL to call.\n        * @name Highcharts.AjaxSettingsObject#url\n        * @type {string}\n        */\n        (''); // keeps doclets above in JS file\n\n        return HttpUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Exporting.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Chart/ChartNavigationComposition.js'], _modules['Core/Defaults.js'], _modules['Extensions/Exporting/ExportingDefaults.js'], _modules['Extensions/Exporting/ExportingSymbols.js'], _modules['Extensions/Exporting/Fullscreen.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Core/Utilities.js']], function (AST, Chart, ChartNavigationComposition, D, ExportingDefaults, ExportingSymbols, Fullscreen, G, HU, U) {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, setOptions } = D;\n        const { doc, SVG_NS, win } = G;\n        const { addEvent, css, createElement, discardElement, extend, find, fireEvent, isObject, merge, objectEach, pick, removeEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var Exporting;\n        (function (Exporting) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            // These CSS properties are not inlined. Remember camelCase.\n            const inlineDenylist = [\n                /-/,\n                /^(clipPath|cssText|d|height|width)$/,\n                /^font$/,\n                /[lL]ogical(Width|Height)$/,\n                /^parentRule$/,\n                /perspective/,\n                /TapHighlightColor/,\n                /^transition/,\n                /^length$/,\n                /^[0-9]+$/ // #17538\n            ];\n            // These ones are translated to attributes rather than styles\n            const inlineToAttributes = [\n                'fill',\n                'stroke',\n                'strokeLinecap',\n                'strokeLinejoin',\n                'strokeWidth',\n                'textAnchor',\n                'x',\n                'y'\n            ];\n            Exporting.inlineAllowlist = [];\n            const unstyledElements = [\n                'clipPath',\n                'defs',\n                'desc'\n            ];\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let printingChart;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Add the export button to the chart, with options.\n             *\n             * @private\n             * @function Highcharts.Chart#addButton\n             * @param {Highcharts.NavigationButtonOptions} options\n             * @requires modules/exporting\n             */\n            function addButton(options) {\n                const chart = this, renderer = chart.renderer, btnOptions = merge(chart.options.navigation.buttonOptions, options), onclick = btnOptions.onclick, menuItems = btnOptions.menuItems, symbolSize = btnOptions.symbolSize || 12;\n                let symbol;\n                if (!chart.btnCount) {\n                    chart.btnCount = 0;\n                }\n                // Keeps references to the button elements\n                if (!chart.exportDivElements) {\n                    chart.exportDivElements = [];\n                    chart.exportSVGElements = [];\n                }\n                if (btnOptions.enabled === false || !btnOptions.theme) {\n                    return;\n                }\n                const attr = btnOptions.theme;\n                let callback;\n                if (!chart.styledMode) {\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                if (onclick) {\n                    callback = function (e) {\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        onclick.call(chart, e);\n                    };\n                }\n                else if (menuItems) {\n                    callback = function (e) {\n                        // consistent with onclick call (#3495)\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        chart.contextMenu(button.menuClassName, menuItems, button.translateX, button.translateY, button.width, button.height, button);\n                        button.setState(2);\n                    };\n                }\n                if (btnOptions.text && btnOptions.symbol) {\n                    attr.paddingLeft = pick(attr.paddingLeft, 30);\n                }\n                else if (!btnOptions.text) {\n                    extend(attr, {\n                        width: btnOptions.width,\n                        height: btnOptions.height,\n                        padding: 0\n                    });\n                }\n                if (!chart.styledMode) {\n                    attr['stroke-linecap'] = 'round';\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                const button = renderer\n                    .button(btnOptions.text, 0, 0, callback, attr, void 0, void 0, void 0, void 0, btnOptions.useHTML)\n                    .addClass(options.className)\n                    .attr({\n                    title: pick(chart.options.lang[btnOptions._titleKey || btnOptions.titleKey], '')\n                });\n                button.menuClassName = (options.menuClassName ||\n                    'highcharts-menu-' + chart.btnCount++);\n                if (btnOptions.symbol) {\n                    symbol = renderer\n                        .symbol(btnOptions.symbol, btnOptions.symbolX - (symbolSize / 2), btnOptions.symbolY - (symbolSize / 2), symbolSize, symbolSize\n                    // If symbol is an image, scale it (#7957)\n                    , {\n                        width: symbolSize,\n                        height: symbolSize\n                    })\n                        .addClass('highcharts-button-symbol')\n                        .attr({\n                        zIndex: 1\n                    })\n                        .add(button);\n                    if (!chart.styledMode) {\n                        symbol.attr({\n                            stroke: btnOptions.symbolStroke,\n                            fill: btnOptions.symbolFill,\n                            'stroke-width': btnOptions.symbolStrokeWidth || 1\n                        });\n                    }\n                }\n                button\n                    .add(chart.exportingGroup)\n                    .align(extend(btnOptions, {\n                    width: button.width,\n                    x: pick(btnOptions.x, chart.buttonOffset) // #1654\n                }), true, 'spacingBox');\n                chart.buttonOffset += ((button.width + btnOptions.buttonSpacing) *\n                    (btnOptions.align === 'right' ? -1 : 1));\n                chart.exportSVGElements.push(button, symbol);\n            }\n            /**\n             * Clena up after printing a chart.\n             *\n             * @function Highcharts#afterPrint\n             *\n             * @private\n             *\n             * @param {Highcharts.Chart} chart\n             *        Chart that was (or suppose to be) printed\n             *\n             * @emits Highcharts.Chart#event:afterPrint\n             */\n            function afterPrint() {\n                const chart = this;\n                if (!chart.printReverseInfo) {\n                    return void 0;\n                }\n                const { childNodes, origDisplay, resetParams } = chart.printReverseInfo;\n                // put the chart back in\n                chart.moveContainers(chart.renderTo);\n                // restore all body content\n                [].forEach.call(childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        node.style.display = (origDisplay[i] || '');\n                    }\n                });\n                chart.isPrinting = false;\n                // Reset printMaxWidth\n                if (resetParams) {\n                    chart.setSize.apply(chart, resetParams);\n                }\n                delete chart.printReverseInfo;\n                printingChart = void 0;\n                fireEvent(chart, 'afterPrint');\n            }\n            /**\n             * Prepare chart and document before printing a chart.\n             *\n             * @function Highcharts#beforePrint\n             *\n             * @private\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             */\n            function beforePrint() {\n                const chart = this, body = doc.body, printMaxWidth = chart.options.exporting.printMaxWidth, printReverseInfo = {\n                    childNodes: body.childNodes,\n                    origDisplay: [],\n                    resetParams: void 0\n                };\n                chart.isPrinting = true;\n                chart.pointer.reset(null, 0);\n                fireEvent(chart, 'beforePrint');\n                // Handle printMaxWidth\n                const handleMaxWidth = printMaxWidth &&\n                    chart.chartWidth > printMaxWidth;\n                if (handleMaxWidth) {\n                    printReverseInfo.resetParams = [\n                        chart.options.chart.width,\n                        void 0,\n                        false\n                    ];\n                    chart.setSize(printMaxWidth, void 0, false);\n                }\n                // hide all body content\n                [].forEach.call(printReverseInfo.childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        printReverseInfo.origDisplay[i] = node.style.display;\n                        node.style.display = 'none';\n                    }\n                });\n                // pull out the chart\n                chart.moveContainers(body);\n                // Storage details for undo action after printing\n                chart.printReverseInfo = printReverseInfo;\n            }\n            /**\n             * @private\n             */\n            function chartCallback(chart) {\n                const composition = chart;\n                composition.renderExporting();\n                addEvent(chart, 'redraw', composition.renderExporting);\n                // Destroy the export elements at chart destroy\n                addEvent(chart, 'destroy', composition.destroyExport);\n                // Uncomment this to see a button directly below the chart, for quick\n                // testing of export\n                /*\n                let button, viewImage, viewSource;\n                if (!chart.renderer.forExport) {\n                    viewImage = function () {\n                        let div = doc.createElement('div');\n                        div.innerHTML = chart.getSVGForExport();\n                        chart.renderTo.parentNode.appendChild(div);\n                    };\n\n                    viewSource = function () {\n                        let pre = doc.createElement('pre');\n                        pre.innerHTML = chart.getSVGForExport()\n                            .replace(/</g, '\\n&lt;')\n                            .replace(/>/g, '&gt;');\n                        chart.renderTo.parentNode.appendChild(pre);\n                    };\n\n                    viewImage();\n\n                    // View SVG Image\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Image';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewImage;\n\n                    // View SVG Source\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Source';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewSource;\n                }\n                //*/\n            }\n            /**\n             * @private\n             */\n            function compose(ChartClass, SVGRendererClass) {\n                ExportingSymbols.compose(SVGRendererClass);\n                Fullscreen.compose(ChartClass);\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    const chartProto = ChartClass.prototype;\n                    chartProto.afterPrint = afterPrint;\n                    chartProto.exportChart = exportChart;\n                    chartProto.inlineStyles = inlineStyles;\n                    chartProto.print = print;\n                    chartProto.sanitizeSVG = sanitizeSVG;\n                    chartProto.getChartHTML = getChartHTML;\n                    chartProto.getSVG = getSVG;\n                    chartProto.getSVGForExport = getSVGForExport;\n                    chartProto.getFilename = getFilename;\n                    chartProto.moveContainers = moveContainers;\n                    chartProto.beforePrint = beforePrint;\n                    chartProto.contextMenu = contextMenu;\n                    chartProto.addButton = addButton;\n                    chartProto.destroyExport = destroyExport;\n                    chartProto.renderExporting = renderExporting;\n                    chartProto.callbacks.push(chartCallback);\n                    addEvent(ChartClass, 'init', onChartInit);\n                    if (G.isSafari) {\n                        G.win.matchMedia('print').addListener(function (mqlEvent) {\n                            if (!printingChart) {\n                                return void 0;\n                            }\n                            if (mqlEvent.matches) {\n                                printingChart.beforePrint();\n                            }\n                            else {\n                                printingChart.afterPrint();\n                            }\n                        });\n                    }\n                }\n                if (U.pushUnique(composedMembers, setOptions)) {\n                    defaultOptions.exporting = merge(ExportingDefaults.exporting, defaultOptions.exporting);\n                    defaultOptions.lang = merge(ExportingDefaults.lang, defaultOptions.lang);\n                    // Buttons and menus are collected in a separate config option set\n                    // called 'navigation'. This can be extended later to add control\n                    // buttons like zoom and pan right click menus.\n                    defaultOptions.navigation = merge(ExportingDefaults.navigation, defaultOptions.navigation);\n                }\n            }\n            Exporting.compose = compose;\n            /**\n             * Display a popup menu for choosing the export type.\n             *\n             * @private\n             * @function Highcharts.Chart#contextMenu\n             * @param {string} className\n             *        An identifier for the menu.\n             * @param {Array<string|Highcharts.ExportingMenuObject>} items\n             *        A collection with text and onclicks for the items.\n             * @param {number} x\n             *        The x position of the opener button\n             * @param {number} y\n             *        The y position of the opener button\n             * @param {number} width\n             *        The width of the opener button\n             * @param {number} height\n             *        The height of the opener button\n             * @requires modules/exporting\n             */\n            function contextMenu(className, items, x, y, width, height, button) {\n                const chart = this, navOptions = chart.options.navigation, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, cacheName = 'cache-' + className, menuPadding = Math.max(width, height); // for mouse leave detection\n                let innerMenu, menu = chart[cacheName];\n                // create the menu only the first time\n                if (!menu) {\n                    // create a HTML element above the SVG\n                    chart.exportContextMenu = chart[cacheName] = menu =\n                        createElement('div', {\n                            className: className\n                        }, {\n                            position: 'absolute',\n                            zIndex: 1000,\n                            padding: menuPadding + 'px',\n                            pointerEvents: 'auto'\n                        }, chart.fixedDiv || chart.container);\n                    innerMenu = createElement('ul', { className: 'highcharts-menu' }, chart.styledMode ? {} : {\n                        listStyle: 'none',\n                        margin: 0,\n                        padding: 0\n                    }, menu);\n                    // Presentational CSS\n                    if (!chart.styledMode) {\n                        css(innerMenu, extend({\n                            MozBoxShadow: '3px 3px 10px #888',\n                            WebkitBoxShadow: '3px 3px 10px #888',\n                            boxShadow: '3px 3px 10px #888'\n                        }, navOptions.menuStyle));\n                    }\n                    // hide on mouse out\n                    menu.hideMenu = function () {\n                        css(menu, { display: 'none' });\n                        if (button) {\n                            button.setState(0);\n                        }\n                        chart.openMenu = false;\n                        // #10361, #9998\n                        css(chart.renderTo, { overflow: 'hidden' });\n                        css(chart.container, { overflow: 'hidden' });\n                        U.clearTimeout(menu.hideTimer);\n                        fireEvent(chart, 'exportMenuHidden');\n                    };\n                    // Hide the menu some time after mouse leave (#1357)\n                    chart.exportEvents.push(addEvent(menu, 'mouseleave', function () {\n                        menu.hideTimer = win.setTimeout(menu.hideMenu, 500);\n                    }), addEvent(menu, 'mouseenter', function () {\n                        U.clearTimeout(menu.hideTimer);\n                    }), \n                    // Hide it on clicking or touching outside the menu (#2258,\n                    // #2335, #2407)\n                    addEvent(doc, 'mouseup', function (e) {\n                        if (!chart.pointer.inClass(e.target, className)) {\n                            menu.hideMenu();\n                        }\n                    }), addEvent(menu, 'click', function () {\n                        if (chart.openMenu) {\n                            menu.hideMenu();\n                        }\n                    }));\n                    // create the items\n                    items.forEach(function (item) {\n                        if (typeof item === 'string') {\n                            item = chart.options.exporting\n                                .menuItemDefinitions[item];\n                        }\n                        if (isObject(item, true)) {\n                            let element;\n                            if (item.separator) {\n                                element = createElement('hr', void 0, void 0, innerMenu);\n                            }\n                            else {\n                                // When chart initialized with the table, wrong button\n                                // text displayed, #14352.\n                                if (item.textKey === 'viewData' &&\n                                    chart.isDataTableVisible) {\n                                    item.textKey = 'hideData';\n                                }\n                                element = createElement('li', {\n                                    className: 'highcharts-menu-item',\n                                    onclick: function (e) {\n                                        if (e) { // IE7\n                                            e.stopPropagation();\n                                        }\n                                        menu.hideMenu();\n                                        if (item.onclick) {\n                                            item.onclick\n                                                .apply(chart, arguments);\n                                        }\n                                    }\n                                }, void 0, innerMenu);\n                                AST.setElementHTML(element, item.text ||\n                                    chart.options.lang[item.textKey]);\n                                if (!chart.styledMode) {\n                                    element.onmouseover = function () {\n                                        css(this, navOptions.menuItemHoverStyle);\n                                    };\n                                    element.onmouseout = function () {\n                                        css(this, navOptions.menuItemStyle);\n                                    };\n                                    css(element, extend({\n                                        cursor: 'pointer'\n                                    }, navOptions.menuItemStyle || {}));\n                                }\n                            }\n                            // Keep references to menu divs to be able to destroy them\n                            chart.exportDivElements.push(element);\n                        }\n                    });\n                    // Keep references to menu and innerMenu div to be able to destroy\n                    // them\n                    chart.exportDivElements.push(innerMenu, menu);\n                    chart.exportMenuWidth = menu.offsetWidth;\n                    chart.exportMenuHeight = menu.offsetHeight;\n                }\n                const menuStyle = { display: 'block' };\n                // if outside right, right align it\n                if (x + chart.exportMenuWidth > chartWidth) {\n                    menuStyle.right = (chartWidth - x - width - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.left = (x - menuPadding) + 'px';\n                }\n                // if outside bottom, bottom align it\n                if (y + height + chart.exportMenuHeight > chartHeight &&\n                    button.alignOptions.verticalAlign !== 'top') {\n                    menuStyle.bottom = (chartHeight - y - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.top = (y + height - menuPadding) + 'px';\n                }\n                css(menu, menuStyle);\n                // #10361, #9998\n                css(chart.renderTo, { overflow: '' });\n                css(chart.container, { overflow: '' });\n                chart.openMenu = true;\n                fireEvent(chart, 'exportMenuShown');\n            }\n            /**\n             * Destroy the export buttons.\n             * @private\n             * @function Highcharts.Chart#destroyExport\n             * @param {global.Event} [e]\n             * @requires modules/exporting\n             */\n            function destroyExport(e) {\n                const chart = e ? e.target : this, exportSVGElements = chart.exportSVGElements, exportDivElements = chart.exportDivElements, exportEvents = chart.exportEvents;\n                let cacheName;\n                // Destroy the extra buttons added\n                if (exportSVGElements) {\n                    exportSVGElements.forEach((elem, i) => {\n                        // Destroy and null the svg elements\n                        if (elem) { // #1822\n                            elem.onclick = elem.ontouchstart = null;\n                            cacheName = 'cache-' + elem.menuClassName;\n                            if (chart[cacheName]) {\n                                delete chart[cacheName];\n                            }\n                            exportSVGElements[i] = elem.destroy();\n                        }\n                    });\n                    exportSVGElements.length = 0;\n                }\n                // Destroy the exporting group\n                if (chart.exportingGroup) {\n                    chart.exportingGroup.destroy();\n                    delete chart.exportingGroup;\n                }\n                // Destroy the divs for the menu\n                if (exportDivElements) {\n                    exportDivElements.forEach(function (elem, i) {\n                        if (elem) {\n                            // Remove the event handler\n                            U.clearTimeout(elem.hideTimer); // #5427\n                            removeEvent(elem, 'mouseleave');\n                            // Remove inline events\n                            // (chart.exportDivElements as any)[i] =\n                            exportDivElements[i] =\n                                elem.onmouseout =\n                                    elem.onmouseover =\n                                        elem.ontouchstart =\n                                            elem.onclick = null;\n                            // Destroy the div by moving to garbage bin\n                            discardElement(elem);\n                        }\n                    });\n                    exportDivElements.length = 0;\n                }\n                if (exportEvents) {\n                    exportEvents.forEach(function (unbind) {\n                        unbind();\n                    });\n                    exportEvents.length = 0;\n                }\n            }\n            /**\n             * Exporting module required. Submit an SVG version of the chart to a server\n             * along with some parameters for conversion.\n             *\n             * @sample highcharts/members/chart-exportchart/\n             *         Export with no options\n             * @sample highcharts/members/chart-exportchart-filename/\n             *         PDF type and custom filename\n             * @sample highcharts/members/chart-exportchart-custom-background/\n             *         Different chart background in export\n             * @sample stock/members/chart-exportchart/\n             *         Export with Highcharts Stock\n             *\n             * @function Highcharts.Chart#exportChart\n             *\n             * @param {Highcharts.ExportingOptions} exportingOptions\n             *        Exporting options in addition to those defined in\n             *        [exporting](https://api.highcharts.com/highcharts/exporting).\n             *\n             * @param {Highcharts.Options} chartOptions\n             *        Additional chart options for the exported chart. For example a\n             *        different background color can be added here, or `dataLabels` for\n             *        export only.\n             *\n             * @requires modules/exporting\n             */\n            function exportChart(exportingOptions, chartOptions) {\n                const svg = this.getSVGForExport(exportingOptions, chartOptions);\n                // merge the options\n                exportingOptions = merge(this.options.exporting, exportingOptions);\n                // do the post\n                HU.post(exportingOptions.url, {\n                    filename: exportingOptions.filename ?\n                        exportingOptions.filename.replace(/\\//g, '-') :\n                        this.getFilename(),\n                    type: exportingOptions.type,\n                    width: exportingOptions.width,\n                    scale: exportingOptions.scale,\n                    svg: svg\n                }, exportingOptions.formAttributes);\n            }\n            /**\n             * Return the unfiltered innerHTML of the chart container. Used as hook for\n             * plugins. In styled mode, it also takes care of inlining CSS style rules.\n             *\n             * @see Chart#getSVG\n             *\n             * @function Highcharts.Chart#getChartHTML\n             *\n             * @return {string}\n             * The unfiltered SVG of the chart.\n             *\n             * @requires modules/exporting\n             */\n            function getChartHTML() {\n                if (this.styledMode) {\n                    this.inlineStyles();\n                }\n                return this.container.innerHTML;\n            }\n            /**\n             * Get the default file name used for exported charts. By default it creates\n             * a file name based on the chart title.\n             *\n             * @function Highcharts.Chart#getFilename\n             *\n             * @return {string} A file name without extension.\n             *\n             * @requires modules/exporting\n             */\n            function getFilename() {\n                const s = this.userOptions.title && this.userOptions.title.text;\n                let filename = this.options.exporting.filename;\n                if (filename) {\n                    return filename.replace(/\\//g, '-');\n                }\n                if (typeof s === 'string') {\n                    filename = s\n                        .toLowerCase()\n                        .replace(/<\\/?[^>]+(>|$)/g, '') // strip HTML tags\n                        .replace(/[\\s_]+/g, '-')\n                        .replace(/[^a-z0-9\\-]/g, '') // preserve only latin\n                        .replace(/^[\\-]+/g, '') // dashes in the start\n                        .replace(/[\\-]+/g, '-') // dashes in a row\n                        .substr(0, 24)\n                        .replace(/[\\-]+$/g, ''); // dashes in the end;\n                }\n                if (!filename || filename.length < 5) {\n                    filename = 'chart';\n                }\n                return filename;\n            }\n            /**\n             * Return an SVG representation of the chart.\n             *\n             * @sample highcharts/members/chart-getsvg/\n             *         View the SVG from a button\n             *\n             * @function Highcharts.Chart#getSVG\n             *\n             * @param {Highcharts.Options} [chartOptions]\n             *        Additional chart options for the generated SVG representation. For\n             *        collections like `xAxis`, `yAxis` or `series`, the additional\n             *        options is either merged in to the original item of the same\n             *        `id`, or to the first item if a common id is not found.\n             *\n             * @return {string}\n             *         The SVG representation of the rendered chart.\n             *\n             * @emits Highcharts.Chart#event:getSVG\n             *\n             * @requires modules/exporting\n             */\n            function getSVG(chartOptions) {\n                const chart = this;\n                let svg, seriesOptions, \n                // Copy the options and add extra options\n                options = merge(chart.options, chartOptions);\n                // Use userOptions to make the options chain in series right (#3881)\n                options.plotOptions = merge(chart.userOptions.plotOptions, chartOptions && chartOptions.plotOptions);\n                // ... and likewise with time, avoid that undefined time properties are\n                // merged over legacy global time options\n                options.time = merge(chart.userOptions.time, chartOptions && chartOptions.time);\n                // create a sandbox where a new chart will be generated\n                const sandbox = createElement('div', null, {\n                    position: 'absolute',\n                    top: '-9999em',\n                    width: chart.chartWidth + 'px',\n                    height: chart.chartHeight + 'px'\n                }, doc.body);\n                // get the source size\n                const cssWidth = chart.renderTo.style.width, cssHeight = chart.renderTo.style.height, sourceWidth = options.exporting.sourceWidth ||\n                    options.chart.width ||\n                    (/px$/.test(cssWidth) && parseInt(cssWidth, 10)) ||\n                    (options.isGantt ? 800 : 600), sourceHeight = options.exporting.sourceHeight ||\n                    options.chart.height ||\n                    (/px$/.test(cssHeight) && parseInt(cssHeight, 10)) ||\n                    400;\n                // override some options\n                extend(options.chart, {\n                    animation: false,\n                    renderTo: sandbox,\n                    forExport: true,\n                    renderer: 'SVGRenderer',\n                    width: sourceWidth,\n                    height: sourceHeight\n                });\n                options.exporting.enabled = false; // hide buttons in print\n                delete options.data; // #3004\n                // prepare for replicating the chart\n                options.series = [];\n                chart.series.forEach(function (serie) {\n                    seriesOptions = merge(serie.userOptions, {\n                        animation: false,\n                        enableMouseTracking: false,\n                        showCheckbox: false,\n                        visible: serie.visible\n                    });\n                    // Used for the navigator series that has its own option set\n                    if (!seriesOptions.isInternal) {\n                        options.series.push(seriesOptions);\n                    }\n                });\n                const colls = {};\n                chart.axes.forEach(function (axis) {\n                    // Assign an internal key to ensure a one-to-one mapping (#5924)\n                    if (!axis.userOptions.internalKey) { // #6444\n                        axis.userOptions.internalKey = uniqueKey();\n                    }\n                    if (!axis.options.isInternal) {\n                        if (!colls[axis.coll]) {\n                            colls[axis.coll] = true;\n                            options[axis.coll] = [];\n                        }\n                        options[axis.coll].push(merge(axis.userOptions, {\n                            visible: axis.visible\n                        }));\n                    }\n                });\n                // Generate the chart copy\n                const chartCopy = new chart.constructor(options, chart.callback);\n                // Axis options and series options  (#2022, #3900, #5982)\n                if (chartOptions) {\n                    ['xAxis', 'yAxis', 'series'].forEach(function (coll) {\n                        const collOptions = {};\n                        if (chartOptions[coll]) {\n                            collOptions[coll] = chartOptions[coll];\n                            chartCopy.update(collOptions);\n                        }\n                    });\n                }\n                // Reflect axis extremes in the export (#5924)\n                chart.axes.forEach(function (axis) {\n                    const axisCopy = find(chartCopy.axes, function (copy) {\n                        return copy.options.internalKey ===\n                            axis.userOptions.internalKey;\n                    }), extremes = axis.getExtremes(), userMin = extremes.userMin, userMax = extremes.userMax;\n                    if (axisCopy &&\n                        ((typeof userMin !== 'undefined' &&\n                            userMin !== axisCopy.min) || (typeof userMax !== 'undefined' &&\n                            userMax !== axisCopy.max))) {\n                        axisCopy.setExtremes(userMin, userMax, true, false);\n                    }\n                });\n                // Get the SVG from the container's innerHTML\n                svg = chartCopy.getChartHTML();\n                fireEvent(this, 'getSVG', { chartCopy: chartCopy });\n                svg = chart.sanitizeSVG(svg, options);\n                // free up memory\n                options = null;\n                chartCopy.destroy();\n                discardElement(sandbox);\n                return svg;\n            }\n            /**\n             * @private\n             * @function Highcharts.Chart#getSVGForExport\n             */\n            function getSVGForExport(options, chartOptions) {\n                const chartExportingOptions = this.options.exporting;\n                return this.getSVG(merge({ chart: { borderRadius: 0 } }, chartExportingOptions.chartOptions, chartOptions, {\n                    exporting: {\n                        sourceWidth: ((options && options.sourceWidth) ||\n                            chartExportingOptions.sourceWidth),\n                        sourceHeight: ((options && options.sourceHeight) ||\n                            chartExportingOptions.sourceHeight)\n                    }\n                }));\n            }\n            /**\n             * Make hyphenated property names out of camelCase\n             * @private\n             * @param {string} prop\n             * Property name in camelCase\n             * @return {string}\n             * Hyphenated property name\n             */\n            function hyphenate(prop) {\n                return prop.replace(/([A-Z])/g, function (a, b) {\n                    return '-' + b.toLowerCase();\n                });\n            }\n            /**\n             * Analyze inherited styles from stylesheets and add them inline\n             *\n             * @private\n             * @function Highcharts.Chart#inlineStyles\n             *\n             * @todo What are the border styles for text about? In general, text has a\n             *       lot of properties.\n             *\n             * @todo Make it work with IE9 and IE10.\n             *\n             * @requires modules/exporting\n             */\n            function inlineStyles() {\n                const denylist = inlineDenylist, allowlist = Exporting.inlineAllowlist, // For IE\n                defaultStyles = {};\n                let dummySVG;\n                // Create an iframe where we read default styles without pollution from\n                // this body\n                const iframe = doc.createElement('iframe');\n                css(iframe, {\n                    width: '1px',\n                    height: '1px',\n                    visibility: 'hidden'\n                });\n                doc.body.appendChild(iframe);\n                const iframeDoc = (iframe.contentWindow && iframe.contentWindow.document);\n                if (iframeDoc) {\n                    iframeDoc.body.appendChild(iframeDoc.createElementNS(SVG_NS, 'svg'));\n                }\n                /**\n                 * Call this on all elements and recurse to children\n                 * @private\n                 * @param {Highcharts.HTMLDOMElement} node\n                 *        Element child\n                     */\n                function recurse(node) {\n                    const filteredStyles = {};\n                    let styles, parentStyles, dummy, denylisted, allowlisted, i;\n                    /**\n                     * Check computed styles and whether they are in the allow/denylist\n                     * for styles or atttributes.\n                     * @private\n                     * @param {string} val\n                     *        Style value\n                     * @param {string} prop\n                     *        Style property name\n                             */\n                    function filterStyles(val, prop) {\n                        // Check against allowlist & denylist\n                        denylisted = allowlisted = false;\n                        if (allowlist.length) {\n                            // Styled mode in IE has a allowlist instead. Exclude all\n                            // props not in this list.\n                            i = allowlist.length;\n                            while (i-- && !allowlisted) {\n                                allowlisted = allowlist[i].test(prop);\n                            }\n                            denylisted = !allowlisted;\n                        }\n                        // Explicitly remove empty transforms\n                        if (prop === 'transform' && val === 'none') {\n                            denylisted = true;\n                        }\n                        i = denylist.length;\n                        while (i-- && !denylisted) {\n                            denylisted = (denylist[i].test(prop) ||\n                                typeof val === 'function');\n                        }\n                        if (!denylisted) {\n                            // If parent node has the same style, it gets inherited, no\n                            // need to inline it. Top-level props should be diffed\n                            // against parent (#7687).\n                            if ((parentStyles[prop] !== val ||\n                                node.nodeName === 'svg') &&\n                                defaultStyles[node.nodeName][prop] !== val) {\n                                // Attributes\n                                if (!inlineToAttributes ||\n                                    inlineToAttributes.indexOf(prop) !== -1) {\n                                    if (val) {\n                                        node.setAttribute(hyphenate(prop), val);\n                                    }\n                                    // Styles\n                                }\n                                else {\n                                    filteredStyles[prop] = val;\n                                }\n                            }\n                        }\n                    }\n                    if (iframeDoc &&\n                        node.nodeType === 1 &&\n                        unstyledElements.indexOf(node.nodeName) === -1) {\n                        styles = win.getComputedStyle(node, null);\n                        parentStyles = node.nodeName === 'svg' ?\n                            {} :\n                            win.getComputedStyle(node.parentNode, null);\n                        // Get default styles from the browser so that we don't have to\n                        // add these\n                        if (!defaultStyles[node.nodeName]) {\n                            /*\n                            if (!dummySVG) {\n                                dummySVG = doc.createElementNS(H.SVG_NS, 'svg');\n                                dummySVG.setAttribute('version', '1.1');\n                                doc.body.appendChild(dummySVG);\n                            }\n                            */\n                            dummySVG = iframeDoc.getElementsByTagName('svg')[0];\n                            dummy = iframeDoc.createElementNS(node.namespaceURI, node.nodeName);\n                            dummySVG.appendChild(dummy);\n                            // Get the defaults into a standard object (simple merge\n                            // won't do)\n                            const s = win.getComputedStyle(dummy, null), defaults = {};\n                            for (const key in s) {\n                                if (typeof s[key] === 'string' &&\n                                    !/^[0-9]+$/.test(key)) {\n                                    defaults[key] = s[key];\n                                }\n                            }\n                            defaultStyles[node.nodeName] = defaults;\n                            // Remove default fill, otherwise text disappears when\n                            // exported\n                            if (node.nodeName === 'text') {\n                                delete defaultStyles.text.fill;\n                            }\n                            dummySVG.removeChild(dummy);\n                        }\n                        // Loop through all styles and add them inline if they are ok\n                        for (const p in styles) {\n                            if (\n                            // Some browsers put lots of styles on the prototype...\n                            G.isFirefox ||\n                                G.isMS ||\n                                G.isSafari || // #16902\n                                // ... Chrome puts them on the instance\n                                Object.hasOwnProperty.call(styles, p)) {\n                                filterStyles(styles[p], p);\n                            }\n                        }\n                        // Apply styles\n                        css(node, filteredStyles);\n                        // Set default stroke width (needed at least for IE)\n                        if (node.nodeName === 'svg') {\n                            node.setAttribute('stroke-width', '1px');\n                        }\n                        if (node.nodeName === 'text') {\n                            return;\n                        }\n                        // Recurse\n                        [].forEach.call(node.children || node.childNodes, recurse);\n                    }\n                }\n                /**\n                 * Remove the dummy objects used to get defaults\n                 * @private\n                 */\n                function tearDown() {\n                    dummySVG.parentNode.removeChild(dummySVG);\n                    // Remove trash from DOM that stayed after each exporting\n                    iframe.parentNode.removeChild(iframe);\n                }\n                recurse(this.container.querySelector('svg'));\n                tearDown();\n            }\n            /**\n             * Move the chart container(s) to another div.\n             *\n             * @function Highcharts#moveContainers\n             *\n             * @private\n             *\n             * @param {Highcharts.HTMLDOMElement} moveTo\n             *        Move target\n             */\n            function moveContainers(moveTo) {\n                const chart = this;\n                (chart.fixedDiv ? // When scrollablePlotArea is active (#9533)\n                    [chart.fixedDiv, chart.scrollingContainer] :\n                    [chart.container]).forEach(function (div) {\n                    moveTo.appendChild(div);\n                });\n            }\n            /**\n             * Add update methods to handle chart.update and chart.exporting.update and\n             * chart.navigation.update. These must be added to the chart instance rather\n             * than the Chart prototype in order to use the chart instance inside the\n             * update function.\n             * @private\n             */\n            function onChartInit() {\n                const chart = this, \n                /**\n                 * @private\n                 * @param {\"exporting\"|\"navigation\"} prop\n                 *        Property name in option root\n                 * @param {Highcharts.ExportingOptions|Highcharts.NavigationOptions} options\n                 *        Options to update\n                 * @param {boolean} [redraw=true]\n                 *        Whether to redraw\n                         */\n                update = (prop, options, redraw) => {\n                    chart.isDirtyExporting = true;\n                    merge(true, chart.options[prop], options);\n                    if (pick(redraw, true)) {\n                        chart.redraw();\n                    }\n                };\n                chart.exporting = {\n                    update: function (options, redraw) {\n                        update('exporting', options, redraw);\n                    }\n                };\n                // Register update() method for navigation. Cannot be set the same way\n                // as for exporting, because navigation options are shared with bindings\n                // which has separate update() logic.\n                ChartNavigationComposition\n                    .compose(chart).navigation\n                    .addUpdate((options, redraw) => {\n                    update('navigation', options, redraw);\n                });\n            }\n            /**\n             * Exporting module required. Clears away other elements in the page and\n             * prints the chart as it is displayed. By default, when the exporting\n             * module is enabled, a context button with a drop down menu in the upper\n             * right corner accesses this function.\n             *\n             * @sample highcharts/members/chart-print/\n             *         Print from a HTML button\n             *\n             * @function Highcharts.Chart#print\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             * @emits Highcharts.Chart#event:afterPrint\n             *\n             * @requires modules/exporting\n             */\n            function print() {\n                const chart = this;\n                if (chart.isPrinting) { // block the button while in printing mode\n                    return;\n                }\n                printingChart = chart;\n                if (!G.isSafari) {\n                    chart.beforePrint();\n                }\n                // Give the browser time to draw WebGL content, an issue that randomly\n                // appears (at least) in Chrome ~67 on the Mac (#8708).\n                setTimeout(() => {\n                    win.focus(); // #1510\n                    win.print();\n                    // allow the browser to prepare before reverting\n                    if (!G.isSafari) {\n                        setTimeout(() => {\n                            chart.afterPrint();\n                        }, 1000);\n                    }\n                }, 1);\n            }\n            /**\n             * Add the buttons on chart load\n             * @private\n             * @function Highcharts.Chart#renderExporting\n             * @requires modules/exporting\n             */\n            function renderExporting() {\n                const chart = this, exportingOptions = chart.options.exporting, buttons = exportingOptions.buttons, isDirty = chart.isDirtyExporting || !chart.exportSVGElements;\n                chart.buttonOffset = 0;\n                if (chart.isDirtyExporting) {\n                    chart.destroyExport();\n                }\n                if (isDirty && exportingOptions.enabled !== false) {\n                    chart.exportEvents = [];\n                    chart.exportingGroup = chart.exportingGroup ||\n                        chart.renderer.g('exporting-group').attr({\n                            zIndex: 3 // #4955, // #8392\n                        }).add();\n                    objectEach(buttons, function (button) {\n                        chart.addButton(button);\n                    });\n                    chart.isDirtyExporting = false;\n                }\n            }\n            /**\n             * Exporting module only. A collection of fixes on the produced SVG to\n             * account for expando properties, browser bugs.\n             * Returns a cleaned SVG.\n             *\n             * @private\n             * @function Highcharts.Chart#sanitizeSVG\n             * @param {string} svg\n             *        SVG code to sanitize\n             * @param {Highcharts.Options} options\n             *        Chart options to apply\n             * @return {string}\n             *         Sanitized SVG code\n             * @requires modules/exporting\n             */\n            function sanitizeSVG(svg, options) {\n                const split = svg.indexOf('</svg>') + 6;\n                let html = svg.substr(split);\n                // Remove any HTML added to the container after the SVG (#894, #9087)\n                svg = svg.substr(0, split);\n                // Move HTML into a foreignObject\n                if (options && options.exporting && options.exporting.allowHTML) {\n                    if (html) {\n                        html = '<foreignObject x=\"0\" y=\"0\" ' +\n                            'width=\"' + options.chart.width + '\" ' +\n                            'height=\"' + options.chart.height + '\">' +\n                            '<body xmlns=\"http://www.w3.org/1999/xhtml\">' +\n                            // Some tags needs to be closed in xhtml (#13726)\n                            html.replace(/(<(?:img|br).*?(?=\\>))>/g, '$1 />') +\n                            '</body>' +\n                            '</foreignObject>';\n                        svg = svg.replace('</svg>', html + '</svg>');\n                    }\n                }\n                svg = svg\n                    .replace(/zIndex=\"[^\"]+\"/g, '')\n                    .replace(/symbolName=\"[^\"]+\"/g, '')\n                    .replace(/jQuery[0-9]+=\"[^\"]+\"/g, '')\n                    .replace(/url\\((\"|&quot;)(.*?)(\"|&quot;)\\;?\\)/g, 'url($2)')\n                    .replace(/url\\([^#]+#/g, 'url(#')\n                    .replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ')\n                    .replace(/ (|NS[0-9]+\\:)href=/g, ' xlink:href=') // #3567\n                    .replace(/\\n/, ' ')\n                    // Batik doesn't support rgba fills and strokes (#3095)\n                    .replace(/(fill|stroke)=\"rgba\\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\\.]+)\\)\"/g, // eslint-disable-line max-len\n                '$1=\"rgb($2)\" $1-opacity=\"$3\"')\n                    // Replace HTML entities, issue #347\n                    .replace(/&nbsp;/g, '\\u00A0') // no-break space\n                    .replace(/&shy;/g, '\\u00AD'); // soft hyphen\n                return svg;\n            }\n        })(Exporting || (Exporting = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired after a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingAfterPrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired before a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingBeforePrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Function to call if the offline-exporting module fails to export a chart on\n         * the client side.\n         *\n         * @callback Highcharts.ExportingErrorCallbackFunction\n         *\n         * @param {Highcharts.ExportingOptions} options\n         *        The exporting options.\n         *\n         * @param {global.Error} err\n         *        The error from the module.\n         */\n        /**\n         * Definition for a menu item in the context menu.\n         *\n         * @interface Highcharts.ExportingMenuObject\n         */ /**\n        * The text for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#text\n        * @type {string|undefined}\n        */ /**\n        * If internationalization is required, the key to a language string.\n        *\n        * @name Highcharts.ExportingMenuObject#textKey\n        * @type {string|undefined}\n        */ /**\n        * The click handler for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#onclick\n        * @type {Highcharts.EventCallbackFunction<Highcharts.Chart>|undefined}\n        */ /**\n        * Indicates a separator line instead of an item.\n        *\n        * @name Highcharts.ExportingMenuObject#separator\n        * @type {boolean|undefined}\n        */\n        /**\n         * Possible MIME types for exporting.\n         *\n         * @typedef {\"image/png\"|\"image/jpeg\"|\"application/pdf\"|\"image/svg+xml\"} Highcharts.ExportingMimeTypeValue\n         */\n        (''); // keeps doclets above in transpiled file\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after a chart is printed through the context menu item or the\n         * `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingAfterPrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.afterPrint\n         */\n        /**\n         * Fires before a chart is printed through the context menu item or\n         * the `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingBeforePrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.beforePrint\n         */\n        (''); // keeps doclets above in transpiled file\n\n        return Exporting;\n    });\n    _registerModule(_modules, 'masters/modules/exporting.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Exporting/Exporting.js'], _modules['Core/HttpUtilities.js']], function (Highcharts, Exporting, HttpUtilities) {\n\n        const G = Highcharts;\n        G.HttpUtilities = HttpUtilities;\n        G.ajax = HttpUtilities.ajax;\n        G.getJSON = HttpUtilities.getJSON;\n        G.post = HttpUtilities.post;\n        Exporting.compose(G.Chart, G.Renderer);\n\n    });\n}));"],
  "mappings": "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",
  "names": ["factory", "module", "exports", "define", "amd", "Highcharts", "undefined", "_registerModule", "obj", "path", "args", "fn", "hasOwnProperty", "apply", "CustomEvent", "window", "dispatchEvent", "detail", "_modules", "ChartNavigationComposition", "compose", "chart", "navigation", "Additions", "updates", "updateFn", "push", "options", "redraw", "forEach", "call", "H", "isTouchDevice", "ExportingDefaults", "exporting", "allowTableSorting", "type", "url", "pdfFont", "normal", "bold", "bolditalic", "italic", "printMaxWidth", "scale", "buttons", "contextButton", "className", "menuClassName", "symbol", "titleKey", "menuItems", "menuItemDefinitions", "viewFullscreen", "textKey", "onclick", "fullscreen", "toggle", "printChart", "print", "separator", "downloadPNG", "exportChart", "downloadJPEG", "downloadPDF", "downloadSVG", "lang", "exitFullscreen", "contextButtonTitle", "buttonOptions", "symbolSize", "symbolX", "symbolY", "align", "buttonSpacing", "height", "verticalAlign", "width", "symbolFill", "symbolStroke", "symbolStrokeWidth", "theme", "padding", "menuStyle", "border", "borderRadius", "background", "menuItemStyle", "color", "fontSize", "transition", "menuItemHoverStyle", "ExportingSymbols", "menu", "x", "y", "arr", "menuball", "h", "concat", "circle", "modifiedClasses", "SVGRendererClass", "indexOf", "symbols", "prototype", "bind", "AST", "U", "onChartBeforeRender", "Fullscreen", "addEvent", "fireEvent", "composedMembers", "ChartClass", "pushUnique", "isOpen", "container", "renderTo", "browserProps", "requestFullscreen", "fullscreenChange", "mozRequestFullScreen", "webkitRequestFullScreen", "msRequestFullscreen", "optionsChart", "ownerDocument", "Document", "unbindFullscreenEvent", "setSize", "origWidth", "origHeight", "origWidthOption", "origHeightOption", "setButtonText", "chartWidth", "chartHeight", "unbindChange", "close", "unbindDestroy", "promise", "alert", "exportDivElements", "exportingOptions", "exportDivElement", "setElementHTML", "text", "open", "G", "doc", "createElement", "discardElement", "merge", "objectEach", "HttpUtilities", "ajax", "settings", "headers", "json", "xml", "octet", "r", "XMLHttpRequest", "toUpperCase", "setRequestHeader", "dataType", "val", "key", "responseType", "onreadystatechange", "r.onreadystatechange", "res", "readyState", "status", "responseText", "JSON", "parse", "e", "Error", "error", "success", "data", "stringify", "send", "getJSON", "post", "formAttributes", "form", "method", "action", "enctype", "display", "body", "name", "value", "submit", "Chart", "D", "HU", "defaultOptions", "setOptions", "SVG_NS", "win", "css", "extend", "find", "isObject", "pick", "removeEvent", "uniqueKey", "Exporting", "addButton", "renderer", "btnOptions", "btnCount", "exportSVGElements", "enabled", "attr", "callback", "styledMode", "fill", "stroke", "stopPropagation", "contextMenu", "button", "translateX", "translateY", "setState", "paddingLeft", "useHTML", "addClass", "title", "_titleKey", "zIndex", "add", "exportingGroup", "buttonOffset", "afterPrint", "printReverseInfo", "childNodes", "origDisplay", "resetParams", "moveContainers", "node", "i", "nodeType", "style", "isPrinting", "printingChart", "beforePrint", "pointer", "reset", "chartCallback", "renderExporting", "destroyExport", "items", "navOptions", "cacheName", "menuPadding", "Math", "max", "innerMenu", "exportContextMenu", "position", "pointerEvents", "fixedDiv", "listStyle", "margin", "MozBoxShadow", "WebkitBoxShadow", "boxShadow", "hideMenu", "menu.hideMenu", "openMenu", "overflow", "clearTimeout", "hideTimer", "exportEvents", "setTimeout", "inClass", "target", "item", "element", "isDataTableVisible", "arguments", "onmouseover", "element.onmouseover", "onmouseout", "element.onmouseout", "cursor", "exportMenuWidth", "offsetWidth", "exportMenuHeight", "offsetHeight", "right", "left", "alignOptions", "bottom", "top", "elem", "ontouchstart", "destroy", "length", "unbind", "chartOptions", "svg", "getSVGForExport", "filename", "replace", "getFilename", "getChartHTML", "inlineStyles", "innerHTML", "s", "userOptions", "toLowerCase", "substr", "getSVG", "seriesOptions", "plotOptions", "time", "sandbox", "cssWidth", "cssHeight", "sourceWidth", "test", "parseInt", "isGantt", "sourceHeight", "animation", "forExport", "series", "serie", "enableMouseTracking", "showCheckbox", "visible", "isInternal", "colls", "axes", "axis", "internalKey", "coll", "chartCopy", "constructor", "collOptions", "update", "axisCopy", "copy", "extremes", "getExtremes", "userMin", "userMax", "min", "setExtremes", "sanitizeSVG", "chartExportingOptions", "hyphenate", "prop", "a", "b", "recurse", "filteredStyles", "styles", "parentStyles", "iframeDoc", "unstyledElements", "nodeName", "getComputedStyle", "parentNode", "defaultStyles", "dummySVG", "getElementsByTagName", "dummy", "createElementNS", "namespaceURI", "appendChild", "defaults", "removeChild", "p", "isFirefox", "isMS", "isSafari", "Object", "denylisted", "allowlisted", "allowlist", "denylist", "inlineToAttributes", "setAttribute", "children", "inlineDenylist", "inlineAllowlist", "iframe", "visibility", "contentWindow", "document", "querySelector", "moveTo", "scrollingContainer", "div", "onChartInit", "isDirtyExporting", "addUpdate", "focus", "isDirty", "g", "split", "html", "allowHTML", "chartProto", "callbacks", "matchMedia", "addListener", "mqlEvent", "matches", "Renderer"]
}
